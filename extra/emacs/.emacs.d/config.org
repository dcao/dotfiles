#+title: config.org
#+subtitle: david's emacs config

* About
This is my fully literate emacs config.
inspiration: https://github.com/angrybacon/dotemacs
* Bootstrap
** Better defaults
When we're running in GUI mode, we want to disable cursor blinking, the scroll bar, and the toolbar.

#+begin_src emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 1))     ; Enable the tooltips
#+end_src

#+begin_src emacs-lisp
(xterm-mouse-mode 1)
#+end_src

#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
(setq-default
 mac-function-modifier 'hyper

 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-window-vscroll nil                          ; Lighten vertical scroll
 confirm-kill-emacs nil                           ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%Y-%m-%d %H:%M"             ; Format the time string
 echo-keystrokes 0.001
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-major-mode 'literate-calc-mode
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 scroll-margin 10                                 ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-always-indent 'complete
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 use-dialog-box nil
 help-at-pt-display-when-idle t
 help-at-pt-timer-delay 0
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 frame-title-format '((:eval (if (buffer-file-name)
                                 (abbreviate-file-name (buffer-file-name))
                               "%b"))))

(help-at-pt-set-timer)

;; Put autosaves in emacs-saves
(setq auto-save-file-name-transforms
  `((".*" "~/.emacs-saves/" t)))
(setq backup-directory-alist '(("." . "~/.emacs-saves")))

(setq max-lisp-eval-depth 5000)
(setq max-specpdl-size 5000)

(setq org-startup-indented t)

(setq mouse-autoselect-window t
      focus-follows-mouse t)

(cd "~/")                                         ; Move to the user directory
(delete-selection-mode 1)                         ; Replace region when inserting text
; (display-time-mode 1)                             ; Enable time in the mode-line
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
; https://github.com/railwaycat/homebrew-emacsmacport/issues/139
(menu-bar-mode 1)
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(column-number-mode)                              ; Show col nums in modeline
#+end_src
*** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
#+end_src
** Custom file
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
** Miscellaneous delights
#+begin_src emacs-lisp
(delight '((subword-mode nil t)
           (eldoc-mode nil t)))
#+end_src
** Evil
#+begin_src emacs-lisp
(use-package undo-fu)

(use-package evil
  :custom
  (evil-undo-system 'undo-fu)
  (evil-want-keybindings nil)
  :init
  (setq
   evil-want-C-u-scroll t
   evil-undo-system 'undo-fu
   evil-want-C-i-jump nil)
  (evil-mode)
  (evil-normalize-keymaps)
  (setq-default evil-undo-system 'undo-fu)
  :config
  (define-key evil-normal-state-map "u" 'undo-fu-only-undo)
  (define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo))

(add-hook 'window-configuration-change-hook #'evil-normalize-keymaps)
(add-hook 'org-src-mode-hook #'evil-normalize-keymaps)

(use-package evil-collection
  :after evil
  :init
  (setq evil-want-keybindings nil)
  :config
  (evil-collection-init '(magit notmuch calendar dired pdf)))
#+end_src
*** Evil Fringe Mark
o show marks in the left fringe of the editor.
#+begin_src emacs-lisp
(use-package evil-fringe-mark
 :delight global-evil-fringe-mark-mode
 :config
 (global-evil-fringe-mark-mode))
#+end_src
*** evil-surround
#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src
** general.el
*** Leader definitions
#+begin_src emacs-lisp
(defconst dcao/leader-key "SPC")
(defconst dcao/leader-key-alt "C-SPC")
(defconst dcao/local-leader-key "SPC m")
(defconst dcao/local-leader-key-alt "C-SPC m")
#+end_src
*** Bind configuration
#+begin_src emacs-lisp
(use-package general
  :after evil
  :init
  (setq-default evil-undo-system 'undo-tree)
  :config
  (general-evil-setup t)
  (general-unbind 'normal dcao/leader-key)
  (general-unbind 'emacs dcao/leader-key)
  (general-unbind dcao/leader-key-alt)
  
  (general-create-definer dcao-leader-def
    :prefix dcao/leader-key-alt
    :keymaps 'override)
  (general-create-definer dcao-local-leader-def
    :prefix dcao/local-leader-key-alt
    :keymaps 'override)
  
  (general-def '(normal visual) "SPC" (general-simulate-key "C-SPC"))

  (general-def "<escape>" 'keyboard-escape-quit)
  (general-def "C-w" 'backward-kill-word)

  (general-def "M-w" 'kill-this-buffer)
  (general-def "M-q" 'delete-window)

  (general-def "M-P" 'execute-extended-command)

  (general-def "M-[" 'evil-jump-backward)
  (general-def "M-]" 'evil-jump-forward)

  (general-def
    :keymaps 'helm-map
    "C-w" 'backward-kill-word)

  (general-def "C-s" 'save-buffer)

  (general-def dcao/leader-key-alt (general-simulate-key dcao/leader-key))

  (dcao-leader-def
    ;; unbind SPC and give it a title for which-key (see echo area)
    "" '(nil :which-key "universal leader")
    "u" 'universal-argument
    ;; bind nothing but give SPC f a description for which-key
    "f" '(:ignore t :which-key "file")
    ;; use a cons as a replacement
    "g" '(:ignore t :which-key ("g-key" . "git"))
    "x" '(:ignore t :which-key "meta")
    "b k" 'kill-buffer
    "b q" 'kill-this-buffer
    "w q" 'delete-window
    "w /" 'evil-window-vsplit
    "w -" 'evil-window-split
    "w h" 'evil-window-left
    "w j" 'evil-window-down
    "w k" 'evil-window-up
    "w l" 'evil-window-right
    "w n" 'make-frame-command
    "x r" 'dcao/reload-config
    "x q" 'save-buffers-kill-terminal
    "c w" 'count-words
    "c r" 'count-words-region)

  (general-define-key
   :keymaps 'override
   dcao/local-leader-key-alt '(nil :which-key "local leader")))
#+end_src
*** evil-numbers
#+begin_src emacs-lisp
(use-package evil-numbers
  :general
  ("C-a" 'evil-numbers/inc-at-pt))
#+end_src
** buffer-move
#+begin_src emacs-lisp
;;; buffer-move.el --- 

;; Copyright (C) 2004-2014  Lucas Bonnet <lucas@rincevent.net.fr>

;; Author: Lucas Bonnet <lucas@rincevent.net>
;; Keywords: lisp,convenience
;; Version: 0.5
;; URL : https://github.com/lukhas/buffer-move

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
;; 02111-1307, USA.

;;; Commentary:

;; This file is for lazy people wanting to swap buffers without
;; typing C-x b on each window. This is useful when you have :

;; +--------------+-------------+
;; |              |             |
;; |    #emacs    |    #gnus    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           .emacs           |
;; |                            |
;; +----------------------------+

;; and you want to have :

;; +--------------+-------------+
;; |              |             |
;; |    #gnus     |   .emacs    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           #emacs           |
;; |                            |
;; +----------------------------+

;; With buffer-move, just go in #gnus, do buf-move-left, go to #emacs
;; (which now should be on top right) and do buf-move-down.

;; To use it, simply put a (require 'buffer-move) in your ~/.emacs and
;; define some keybindings. For example, i use :

;; (global-set-key (kbd "<C-S-up>")     'buf-move-up)
;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)


;;; Code:


(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))


(provide 'buffer-move)
;;; buffer-move.el ends here
#+end_src
** gcmh
The Garbage Collector Magic Hack delays emacs' GC from collecting until idle.

#+begin_src emacs-lisp
(use-package gcmh
  :delight
  :config
  (gcmh-mode 1))
#+end_src
** Meta
*** Config reload
#+begin_src emacs-lisp
(defun dcao/reload-config ()
  (interactive)
  (load-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src
*** Config compilation
#+begin_src emacs-lisp
(defun dcao/compile-config ()
  (interactive)
  (byte-compile-file (expand-file-name "config.el" user-emacs-directory))
  (byte-compile-file (expand-file-name "init.el" user-emacs-directory)))
#+end_src
** init shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :init
  (setq exec-path-from-shell-arguments nil)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src
** recentf
#+begin_src emacs-lisp
(use-package recentf
  :init
  (setq recentf-max-saved-items 1000
        recentf-auto-cleanup 'never
        recentf-auto-save-timer (run-with-idle-timer 600 t
                                                     'recentf-save-list))

  :config
  (recentf-mode 1))
#+end_src
** delete this file
#+begin_src emacs-lisp
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if filename
        (if (y-or-n-p (concat "Do you really want to delete file " filename " ?"))
            (progn
              (delete-file filename)
              (message "Deleted file %s." filename)
              (kill-buffer)))
      (message "Not a file visiting buffer!"))))

(dcao-leader-def
  "f d" 'delete-file-and-buffer)
#+end_src
** moving between files
#+begin_src emacs-lisp
(general-define-key "<A-M-right>" 'next-buffer
                    "<A-M-left>"  'previous-buffer)
#+end_src
* UI
** exwm
#+begin_src emacs-lisp
(defun dcao/exwm-launch (command)
  (interactive)
  (let ((default-directory (projectile-project-root)))
    (start-process-shell-command command nil command)))
    
(defun dcao/exwm-bind-launch (command)
  (interactive)
  `(lambda () (interactive) (dcao/exwm-launch ,command)))

(defun dcao/exwm-ws-swap-mon (ws &optional switch force)
  (let ((mon (plist-get exwm-randr-workspace-output-plist ws)))
    (when (or force (not (equal exwm-workspace-current-index ws)))
      (if (string= mon "eDP1")
          (progn
            (plist-put exwm-randr-workspace-output-plist ws "HDMI2")
            (exwm-randr-refresh))
      (plist-put exwm-randr-workspace-output-plist ws "eDP1")
      (exwm-randr-refresh))))
  (when (switch)
    (exwm-workspace-switch ws)))
#+end_src

#+begin_src emacs-lisp
(use-package exwm
  :general
  (:keymaps 'exwm-mode-map
    "M-<tab>" 'consult-buffer
    "M-l" (lambda () (interactive) (split-window nil nil 'right))
    "M-h" (lambda () (interactive) (split-window nil nil 'left))
    "M-j" 'split-window-below)
  :custom
  (exwm-input-prefix-keys '(?\C-\s ?\M-x ?\C-\M-p ?\C-\M-f ?\M-\t))
  :config
  (use-package exwm-config :straight nil)
  ; (use-package exwm-randr :straight nil)

  ; (setq exwm-randr-workspace-output-plist
  ;       '(0 "eDP1"
  ;         1 "HDMI2"
  ;         2 "HDMI2"
  ;         3 "HDMI2"
  ;         4 "eDP1"
  ;         5 "eDP1"
  ;         6 "eDP1"
  ;         7 "eDP1"
  ;         8 "eDP1"
  ;         9 "eDP1"))
  ; (add-hook 'exwm-randr-screen-change-hook
  ;           (lambda ()
  ;             (start-process-shell-command
  ;              "xrandr" nil "xrandr --output HDMI2 --right-of eDP1 --auto")))
  ; (exwm-randr-enable)

  (setq
   exwm-workspace-number 9
   exwm-workspace-show-all-buffers t
   exwm-layout-show-all-buffers t)

  (display-time-mode t)
  (display-battery-mode t)
  
  (use-package desktop-environment
    
    :config
    (setq desktop-environment-brightness-get-command "light")
    (setq desktop-environment-brightness-set-command "light %s")
    (setq desktop-environment-brightness-get-regexp "^\\([0-9]+\\)")
    (setq desktop-environment-brightness-normal-increment "-A 5")
    (setq desktop-environment-brightness-normal-decrement "-U 5")
    (setq desktop-environment-brightness-small-increment "-A 5")
    (setq desktop-environment-brightness-small-decrement "-U 5")
    
    (exwm-input-set-key (kbd "<XF86AudioMute>") #'desktop-environment-toggle-mute)
    (exwm-input-set-key (kbd "<XF86AudioMicMute>") #'desktop-environment-toggle-microphone-mute)
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") #'desktop-environment-volume-increment)
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") #'desktop-environment-volume-decrement)
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") #'desktop-environment-brightness-increment)
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") #'desktop-environment-brightness-decrement)
    (exwm-input-set-key (kbd "<XF86Bluetooth>") #'desktop-environment-toggle-bluetooth)

    (require 'cl-lib)
    (dolist (k '(XF86AudioMute
                 XF86AudioMicMute
                 XF86AudioRaiseVolume
                 XF86AudioLowerVolume
                 XF86MonBrightnessUp
                 XF86MonBrightnessDown
                 XF86Bluetooth))
      (pushnew k exwm-input-prefix-keys)))

  (add-hook 'exwm-update-class-hook
            (lambda ()
              (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-class-name))))
              
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (or (not exwm-instance-name)
                        (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-title))))

  (exwm-input-set-key (kbd "<s-tab>") #'helm-run-external-command)
  (exwm-input-set-key (kbd "<M-tab>") #'consult-buffer)
  (exwm-input-set-key (kbd "s-h") #'evil-window-left)
  (exwm-input-set-key (kbd "s-j") #'evil-window-down)
  (exwm-input-set-key (kbd "s-k") #'evil-window-up)
  (exwm-input-set-key (kbd "s-l") #'evil-window-right)
  (exwm-input-set-key (kbd "s-w") #'kill-this-buffer)
  (exwm-input-set-key (kbd "s-q") #'delete-window)

  (exwm-input-set-key (kbd "s-C-h") #'shrink-window-horizontally)
  (exwm-input-set-key (kbd "s-C-l") #'enlarge-window-horizontally)
  (exwm-input-set-key (kbd "s-C-j") #'shrink-window)
  (exwm-input-set-key (kbd "s-C-k") #'enlarge-window)
  
  (exwm-input-set-key (kbd "s-K") #'buf-move-up)
  (exwm-input-set-key (kbd "s-J") #'buf-move-down)
  (exwm-input-set-key (kbd "s-H") #'buf-move-left)
  (exwm-input-set-key (kbd "s-L") #'buf-move-right)
  
  (exwm-input-set-key (kbd "M-l") (lambda () (interactive) (split-window nil nil 'right)))
  (exwm-input-set-key (kbd "M-h") (lambda () (interactive) (split-window nil nil 'left)))
  (exwm-input-set-key (kbd "M-j") #'split-window-below)

  (dolist (k '(?\s-H
               ?\s-J
               ?\s-K
               ?\C-\s
               ?\s-L))
    (pushnew k exwm-input-prefix-keys))
  
  (exwm-input-set-key (kbd "<s-return>")
                      (lambda ()
                        (interactive)
                        (start-process-shell-command "st" nil
                                                     (if (projectile-project-root)
                                                         (concat "sh -c 'cd " (projectile-project-root) "; st'")
                                                       "st"))))

  (exwm-input-set-key (kbd "C-M-p")
                      (lambda () (interactive) (start-process-shell-command "rofi-pass" nil "rofi-pass")))
  (exwm-input-set-key (kbd "C-M-f")
                      (lambda () (interactive) (start-process-shell-command "flameshot" nil "flameshot gui")))

  (exwm-input-set-key (kbd "s-1")
                      (lambda () (interactive) (exwm-workspace-switch 0)))
  (exwm-input-set-key (kbd "s-2")
                      (lambda () (interactive) (exwm-workspace-switch 1)))
  (exwm-input-set-key (kbd "s-3")
                      (lambda () (interactive) (exwm-workspace-switch 2)))
  (exwm-input-set-key (kbd "s-4")
                      (lambda () (interactive) (exwm-workspace-switch 3)))
  (exwm-input-set-key (kbd "s-5")
                      (lambda () (interactive) (exwm-workspace-switch 4)))
  (exwm-input-set-key (kbd "s-6")
                      (lambda () (interactive) (exwm-workspace-switch 5)))
  (exwm-input-set-key (kbd "s-7")
                      (lambda () (interactive) (exwm-workspace-switch 6)))
  (exwm-input-set-key (kbd "s-8")
                      (lambda () (interactive) (exwm-workspace-switch 7)))
  (exwm-input-set-key (kbd "s-9")
                      (lambda () (interactive) (exwm-workspace-switch 8)))
  (exwm-input-set-key (kbd "s-0")
                      (lambda () (interactive) (exwm-workspace-switch 9)))
                      
  (exwm-input-set-key (kbd "s-!")
                      (lambda () (interactive) (exwm-workspace-move-window 0)))
  (exwm-input-set-key (kbd "s-@")
                      (lambda () (interactive) (exwm-workspace-move-window 1)))
  (exwm-input-set-key (kbd "s-#")
                      (lambda () (interactive) (exwm-workspace-move-window 2)))
  (exwm-input-set-key (kbd "s-$")
                      (lambda () (interactive) (exwm-workspace-move-window 3)))
  (exwm-input-set-key (kbd "s-%")
                      (lambda () (interactive) (exwm-workspace-move-window 4)))
  (exwm-input-set-key (kbd "s-^")
                      (lambda () (interactive) (exwm-workspace-move-window 5)))
  (exwm-input-set-key (kbd "s-&")
                      (lambda () (interactive) (exwm-workspace-move-window 6)))
  (exwm-input-set-key (kbd "s-*")
                      (lambda () (interactive) (exwm-workspace-move-window 7)))
  (exwm-input-set-key (kbd "s-(")
                      (lambda () (interactive) (exwm-workspace-move-window 8)))
  (exwm-input-set-key (kbd "s-)")
                      (lambda () (interactive) (exwm-workspace-move-window 9)))
  
  
  
  (dolist (k '(?\C-\s-!
               ?\C-\s-@
               ?\C-\s-#
               ?\C-\s-$
               ?\C-\s-%
               ?\C-\s-^
               ?\C-\s-&
               ?\C-\s-*
               ?\C-\s-\(
               ?\C-\s-\)))
    (pushnew k exwm-input-prefix-keys))
  
  (exwm-input-set-key (kbd "s-C-!")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 0)))
  (exwm-input-set-key (kbd "s-C-@")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 1)))
  (exwm-input-set-key (kbd "s-C-#")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 2)))
  (exwm-input-set-key (kbd "s-C-$")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 3)))
  (exwm-input-set-key (kbd "s-C-%")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 4)))
  (exwm-input-set-key (kbd "s-C-^")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 5)))
  (exwm-input-set-key (kbd "s-C-&")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 6)))
  (exwm-input-set-key (kbd "s-C-*")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 7)))
  (exwm-input-set-key (kbd "s-C-(")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 8)))
  (exwm-input-set-key (kbd "s-C-)")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 9)))

  (require 'exwm-systemtray)
  (exwm-systemtray-enable)

  (exwm-init))
#+end_src
** Theme
#+begin_src emacs-lisp
(eval-and-compile
  (defun dcao/lisp-dir ()
    (expand-file-name "lisp" user-emacs-directory)))

(setq
 dcao/default-font (font-spec :family "Iosevka Custom" :size 16)
 dcao/mono-font (font-spec :family "Iosevka Custom" :size 16)
 dcao/variable-font (font-spec :family "iA Writer Quattro S" :size 14 :weight 'ultra-light))

(set-face-attribute 'default nil :font dcao/default-font)
(set-face-attribute 'fixed-pitch nil :font dcao/mono-font)
(set-face-attribute 'variable-pitch nil :font dcao/variable-font)

; (use-package nano-theme
;   :straight (:type git :host github
;              :repo "rougier/nano-theme")
;   :config
;   (load-theme 'nano-dark t))

(use-package doom-themes
  :config
  (load-theme 'doom-gruvbox t)
  (doom-themes-org-config))
#+end_src
** Modeline
#+begin_src emacs-lisp
(use-package hide-mode-line)
#+end_src

#+begin_src emacs-lisp

(use-package simple-modeline
  :hook (after-init . simple-modeline-mode)
  :config
  (setq simple-modeline-word-count-modes '()
        simple-modeline-segments '((simple-modeline-segment-modified
                                    simple-modeline-segment-buffer-name
                                    simple-modeline-segment-position)
                                   (simple-modeline-segment-input-method
                                    simple-modeline-segment-vc
                                    simple-modeline-segment-misc-info
                                    simple-modeline-segment-process
                                    simple-modeline-segment-major-mode)))

  ; fix simple modeline format fn to work with olivetti
  (defun simple-modeline--format (left-segments right-segments)
    "Return a string of `window-width' length containing LEFT-SEGMENTS and RIGHT-SEGMENTS, aligned respectively."
    (let* ((left (simple-modeline--format-segments left-segments))
           (right (simple-modeline--format-segments right-segments))
           (reserve (length right)))
      (concat
       left
       (propertize " "
                   'display `((space :align-to (- (+ right right-fringe right-margin) ,(+ reserve 1))))
                   'face '(:inherit simple-modeline-space))
       right))))
#+end_src
#+begin_src text
;; Workaround for https://github.com/seagle0128/doom-modeline/issues/358
(defun doom-modeline--active ()
  t)

(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :config
  (setq
   doom-modeline-minor-modes nil
   doom-modeline-major-mode-icon nil
   doom-modeline-enable-word-count nil
   doom-modeline-lsp nil
   doom-modeline-indent-info nil
   doom-modeline-buffer-encoding nil
   doom-modeline-checker-simple-format t)

  (doom-modeline-def-segment space+
    (doom-modeline-spc))

  ; Fix time display
  (doom-modeline-def-segment misc-info
  "Mode line construct for miscellaneous information.
By default, this shows the information specified by `global-mode-string'."
      '("" mode-line-misc-info))
  
  (doom-modeline-def-modeline 'dcao-main
    '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position word-count parrot selection-info)
    '(objed-state persp-name grip irc mu4e gnus github debug repl lsp minor-modes indent-info buffer-encoding process checker vcs major-mode input-method space+ misc-info battery))
  
  (defun setup-custom-doom-modeline ()
    (doom-modeline-set-modeline 'dcao-main))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline))

;; To fix the right side of the modeline getting cut off (see doom emacs readme)
(setq all-the-icons-scale-factor 1)
#+end_src
** Misc. settings
#+begin_src emacs-lisp
;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+end_src
#+begin_src emacs-lisp
(set-frame-parameter nil 'internal-border-width 0)
#+end_src
*** Line spacing & linums
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(setq-default
 display-line-numbers-width 4
 line-spacing 4)
#+end_src
** Shackle
#+begin_src emacs-lisp
(use-package shackle
  :config
  (setq shackle-default-alignment 'right
        shackle-default-size 0.35
        shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.35)
                        ("\\`\\*BQN.*?\\*\\'" :regexp t :align 'left :size 0.3)
                        ("\\`\\*org-roam.*?\\*\\'" :regexp t :align 'left :size 0.2)))
  (shackle-mode t))
#+end_src
** Centaur Tabs
#+begin_src emacs-lisp
; (use-package centaur-tabs
;   :demand
;   :config
;   (setq centaur-tabs-style "bar")
;   (setq centaur-tabs-set-bar 'over)
;   (setq centaur-tabs-set-modified-marker t)
;   (setq centaur-tabs-modified-marker "*")
;   (centaur-tabs-mode t)
;   (centaur-tabs-toggle-groups)
;   :general
;   (:states 'normal
;    "C-<tab>" 'centaur-tabs-forward
;    "<C-iso-lefttab>" 'centaur-tabs-forward))
; 
; (defun centaur-tabs-buffer-groups ()
;   "`centaur-tabs-buffer-groups' control buffers' group rules.
; 
;   Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
;   All buffer name start with * will group to \"Emacs\".
;   Other buffer group by `centaur-tabs-get-group-name' with project name."
;   (list
; 	(cond
; 	 ((or (string-equal "*" (substring (buffer-name) 0 1))
; 	      (memq major-mode '(magit-process-mode
; 				 magit-status-mode
; 				 magit-diff-mode
; 				 magit-log-mode
; 				 magit-file-mode
; 				 magit-blob-mode
; 				 magit-blame-mode
; 				 )))
; 	  "emacs")
; 	 ((derived-mode-p 'dired-mode)
; 	  "dired")
; 	 ((memq major-mode '(helpful-mode
; 			     help-mode))
; 	  "help")
; 	 ((memq major-mode '(org-mode
; 			     org-agenda-clockreport-mode
; 			     org-src-mode
; 			     org-agenda-mode
; 			     org-beamer-mode
; 			     org-indent-mode
; 			     org-bullets-mode
; 			     org-cdlatex-mode
; 			     org-agenda-log-mode
; 			     diary-mode))
; 	  "org")
; 	 (t
; 	  (buffer-name)))))
#+end_src
** TODO Eyebrowse
** TODO Persp?
* Features
** Direnv
#+begin_src emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+end_src
** which-key
#+begin_src emacs-lisp
(use-package which-key
  :delight which-key-mode
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.5))
#+end_src
** Helm
#+begin_src emacs-lisp
(defun +helm|hide-mode-line (&rest _)
  (with-current-buffer (helm-buffer-get)
    (unless helm-mode-line-string
      (hide-mode-line-mode +1))))
#+end_src

#+begin_src emacs-lisp
(use-package helm
  :commands (helm-find-files-1 helm-run-external-command)
  :delight helm-mode
  :preface
  (setq helm-display-header-line nil
        helm-mode-line-string nil
        helm-ff-auto-update-initial-value nil
        helm-find-files-doc-header nil)
  :general
  (general-define-key
    :keymaps 'helm-map
    "TAB" 'helm-execute-persistent-action
    "C-j" 'helm-select-action)
  :config
  (add-hook 'helm-after-initialize-hook #'+helm|hide-mode-line)
  (advice-add #'helm-display-mode-line :override #'+helm|hide-mode-line)
  (advice-add #'helm-ag-show-status-default-mode-line :override #'ignore) 
  (helm-autoresize-mode 1)
  ; get helm to play nice with shackling
  (setq helm-display-function 'pop-to-buffer)
  (setq helm-autoresize-max-height 35))
#+end_src
*** helm-rg
#+begin_src emacs-lisp
; (use-package helm-rg
;   :general
;   (dcao-leader-def
;     "o s" (lambda () (interactive) (helm-rg "" nil (list dcao/org-root)))
;     "p s r" (lambda () (interactive) (helm-rg "" nil (list (projectile-project-root))))))
#+end_src
** Completion
#+begin_src emacs-lisp
(use-package selectrum
  :init
  (selectrum-mode +1))

(use-package prescient)
(use-package selectrum-prescient
  :init
  (selectrum-prescient-mode))

; (use-package vertico
;   :init
;   (savehist-mode t)
;   (vertico-mode))
; 
; (use-package orderless
;   :custom
;   (completion-styles '(orderless basic))
;   (completion-category-overrides '((file (styles basic partial-completion)))))

(use-package marginalia
  :general
  (general-define-key
   :keymaps 'minibuffer-local-map
   "M-a" 'marginalia-cycle)
  
  :init
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode)

  ;; When using Selectrum, ensure that Selectrum is refreshed when cycling annotations.
  (advice-add #'marginalia-cycle :after
              (lambda () (when (bound-and-true-p selectrum-mode) (selectrum-exhibit)))))

(use-package embark
  :ensure t
  :bind
  ("C-S-a" . embark-act))

(use-package consult
  :straight (:host github
                   :repo "minad/consult"
                   :files ("resources" "resources" "*.el" "*.el"))
  :general
  (general-define-key
   "M-x" 'execute-extended-command
   "M-r" (lambda () (interactive) (consult-ripgrep dcao/org-root))
   "C-x f" 'consult-recent-file
   "C-x b" 'consult-buffer)
  (dcao-leader-def
    ":" 'execute-extended-command
    "f f" 'find-file
    "f r" 'consult-recent-file
    "b b" 'consult-buffer
    "o r" (lambda () (interactive) (consult-ripgrep dcao/org-root))))
                                        ; "p s r" (lambda () (interactive) (consult-ripgrep (projectile-project-root)))))

(use-package ripgrep)

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))

;; miniframe - to get vscode/sublime-style pop-over for
;; M-x and projectile-find-file
; (use-package mini-frame
;   :config
;   (custom-set-variables
;    '(mini-frame-show-parameters
;      '((top . 40)
;        (width . 80)
;        (left . 0.5))))
; 
;   (mini-frame-mode))
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :config
  (delete 'company-dabbrev company-backends)
  (global-company-mode t)
  (setq company-tooltip-idle-delay 0
        company-idle-delay 0
        company-minimum-prefix-length 2))
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :general
  (dcao-leader-def
   "h f" 'helpful-callable
   "h v" 'helpful-variable
   "h k" 'helpful-key))
   
  (general-define-key
   "C-h f" 'helpful-callable
   "C-h v" 'helpful-variable
   "C-h k" 'helpful-key)
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :delight
  :init
  (setq projectile-completion-system 'auto)
  :general
  (general-def :keymaps 'override "M-p" 'projectile-find-file)
  (dcao-leader-def
   "p" '(:keymap projectile-command-map :which-key "projectile")
   "f p" 'projectile-switch-project)
  :config
  (projectile-mode +1))

; (use-package helm-projectile
;   :config
;   (helm-projectile-on))
#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit
  :general
  (dcao-leader-def
   "g g" 'magit-status))
#+end_src
** Dired
Adding a keybind to show git info:
#+begin_src emacs-lisp
(use-package dired-git-info
  :general
  (:keymaps 'dired-mode-map
   ")" 'dired-git-info-mode))
#+end_src
** Yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
  :general
  (dcao-leader-def
   "s" '(:ignore t :which-key "snippets")
   "s n" 'yas-new-snippet
   "s e" 'yas-visit-snippet-file
   "s c" 'insert-char)
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs '("~/.files/extra/emacs/.emacs.d/snippets"))
  (yas-reload-all))
#+end_src
** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src
** Persistent scratch
#+begin_src emacs-lisp
(use-package persistent-scratch
  :config
  (persistent-scratch-setup-default))
#+end_src
** ediff
#+begin_src emacs-lisp
(use-package ediff
  :config (set 'ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src
** literate-calc-mode
#+begin_src emacs-lisp
(use-package literate-calc-mode
  :hook (literate-calc-mode . literate-calc-minor-mode))
#+end_src
** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :general
  (general-def
    :keymaps 'treemacs-mode-map
    [mouse-1] 'treemacs-single-click-expand-action)
  :custom-face
  (treemacs-root-face ((t (:height 1.0)))))
(use-package treemacs-evil)
(use-package treemacs-projectile)
#+end_src
** rmsbolt
#+begin_src emacs-lisp
(use-package rmsbolt)
#+end_src
* Languages
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :hook ((haskell-mode . direnv-update-environment))
  :mode "\\.hs\\'")
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
#+end_src
** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'")
#+end_src
** Lua
#+begin_src emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+end_src
** Idris
#+begin_src emacs-lisp
(use-package idris-mode
  :mode (("\\.idr$" . idris-mode)
         ("\\.ipkg$" . idris-ipkg-mode)
         ("\\.lidr$" . idris-mode)))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
** Lisp
*** Rainbow Delimeters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :init
  (progn
    (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+end_src
*** Parinfer
#+begin_src emacs-lisp
(use-package parinfer
  :after evil
  :general
  (dcao-local-leader-def
   :keymaps 'parinfer-mode-map
   "p" 'parinfer-toggle-mode)
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+end_src
*** Common Lisp
#+begin_src emacs-lisp
(use-package sly
  :commands sly
  :general
  (dcao-local-leader-def
   :keymaps 'sly-mode-map
   "s" 'sly
   "r r" 'sly-mrepl
   "r n" 'sly-mrepl-new
   "r s" 'sly-mrepl-sync)
  :config
  (use-package sly-macrostep)
  (setq inferior-lisp-program "sbcl"))
#+end_src
*** Racket
#+begin_src emacs-lisp
(use-package racket-mode)
#+end_src
** LaTeX
#+begin_src emacs-lisp
; (use-package tex-mode
;   :defer t
;   :config
;   (setq TeX-auto-save t))
#+end_src
** Org
*** Basic config
#+begin_src emacs-lisp
(defvar dcao/org-root (concat (getenv "HOME") "/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/"))
(defvar dcao/org-journal (concat dcao/org-root "j/"))
(defvar dcao/org-inbox-template "* TODO %^{Task}
:PROPERTIES:
:CREATED: %U
:END:
%i")

(setq org-startup-folded 'show2levels)

(defun dcao/include-dir-p (name)
  (not (string-match "archive" name)))

(setq org-show-context-detail
      '((agenda . tree)
        (bookmark-jump . lineage)
        (isearch . lineage)
        (default . tree)))

(setq org-directory dcao/org-root
      org-agenda-files (directory-files-recursively dcao/org-root "\\.org$" nil #'dcao/include-dir-p)
      org-archive-location (concat dcao/org-root "archive/%s::")
      org-agenda-span 7
      org-agenda-start-on-weekday nil
      org-log-done 'time
      org-log-into-drawer t
      org-expiry-inactive-timestamps t
      org-default-priority ?C
      org-agenda-show-outline-path t
      
      org-ellipsis " ▾ "
      org-pretty-entities t
      org-hide-emphasis-markers t
      org-agenda-block-separator ""
      org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t

      org-lowest-priority ?D
      org-preview-latex-default-process 'imagemagick ; faster
      ;; refile
      org-refile-targets '((org-agenda-files :maxlevel . 5))
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm
      ;; contacts
      org-contacts-files `(,(concat dcao/org-root "ppl.org"))
      ;; capture
      org-capture-templates
      `(("t" "inbox todo" entry (file+olp ,(concat dcao/org-root "index.org") "miscellany")
         ,dcao/org-inbox-template)))
#+end_src
**** Agenda modifications
I want to have a line above every day in the agenda. This does that:
#+begin_src emacs-lisp
(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))
#+end_src
*** todo keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE" "CANCELLED")))
#+end_src
*** Fix newline/indent in src blocks
#+begin_src emacs-lisp
(defun dcao/fix-newline-and-indent-in-src-blocks ()
  "Try to mimic `newline-and-indent' with correct indentation in src blocks."
  (when (org-in-src-block-p t)
    (org-babel-do-in-edit-buffer
     (call-interactively #'indent-for-tab-command))))
#+end_src
*** Package config
#+begin_src emacs-lisp
(defun dcao/org/get-todo-keywords-for (keyword)
  (when keyword
    (cl-loop for (type . keyword-spec) in org-todo-keywords
             for keywords = (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                               (match-string 1 x)
                                             x))
                                    keyword-spec)
             if (eq type 'sequence)
             if (member keyword keywords)
             return keywords)))
#+end_src
#+begin_src emacs-lisp
(defun dcao/org/refresh-inline-images ()
  "Refresh image previews in the current heading/tree."
  (interactive)
  
  (if (> (length org-inline-image-overlays) 0)
      (org-remove-inline-images)
    (org-display-inline-images
     t t
     (if (org-before-first-heading-p)
         (line-beginning-position)
       (save-excursion (org-back-to-heading) (point)))
     (if (org-before-first-heading-p)
         (line-end-position)
       (save-excursion (org-end-of-subtree) (point))))))
#+end_src

#+begin_src emacs-lisp
(defun dcao/org/cw (&optional strict really-word)
  "Get region of word at or near point. Derived from current-word."
  (save-excursion
    (let* ((oldpoint (point)) (start (point)) (end (point))
	       (syntaxes (if really-word "w" "w_"))
	       (not-syntaxes (concat "^" syntaxes)))
      (skip-syntax-backward syntaxes) (setq start (point))
      (goto-char oldpoint)
      (skip-syntax-forward syntaxes) (setq end (point))
      (when (and (eq start oldpoint) (eq end oldpoint)
		         ;; Point is neither within nor adjacent to a word.
		         (not strict))
	    ;; Look for preceding word in same line.
	    (skip-syntax-backward not-syntaxes (line-beginning-position))
	    (if (bolp)
	        ;; No preceding word in same line.
	        ;; Look for following word in same line.
	        (progn
	          (skip-syntax-forward not-syntaxes (line-end-position))
	          (setq start (point))
	          (skip-syntax-forward syntaxes)
	          (setq end (point)))
	      (setq end (point))
	      (skip-syntax-backward syntaxes)
	      (setq start (point))))
      ;; If we found something nonempty, return it as a string.
      (unless (= start end)
	    (list start end)))))

; (defun dcao/org/insert-link ()
;   (interactive)
;   (let* ((start (if (use-region-p)
;                     (region-beginning)
;                   (car (dcao/org/cw))))
;          (end (if (use-region-p)
;                   (region-end)
;                 (cadr (dcao/org/cw))))
;          (str (buffer-substring-no-properties start end))
;          (clean-str (replace-regexp-in-string "[[:space:]]+" "_"
;                                             (string-trim str)))
;          ; TODO: use reg file links or roam links?
;          (new-str (concat "[[file:" clean-str ".txt]]")))
;     (replace-region-contents start end (lambda () new-str))))

(defun dcao/org/insert-link ()
  (interactive)
  (let* ((beg (if (use-region-p)
                    (region-beginning)
                  (car (dcao/org/cw))))
         (end (if (use-region-p)
                  (region-end)
                (cadr (dcao/org/cw))))
         (str (buffer-substring-no-properties beg end))
         (roam-id (caar (append
         (org-roam-db-query [:select [id]
                                     :from nodes
                                     :where (= title $s1)] str)
         (org-roam-db-query [:select [alias node-id]
                                     :from aliases
                                     :left-join nodes
                                     :on (= aliases:node-id nodes:id)
                                     :where (= alias $1)] str)))))
    (if roam-id
        (replace-region-contents beg end (lambda () (org-link-make-string (concat "id:" roam-id) str)))
      (org-roam-capture-
       :node (org-roam-node-create :title str)
             :props (append
                     ; (when (and beg end)
                     ;   (list :region (cons beg end)))
                     (list :region (cons (set-marker (make-marker) beg) (set-marker (make-marker) end))
                           :insert-at (point-marker)
                           :link-description str
                           :finalize 'insert-link
                           :immediate-finish t))))))

(defun dcao/org/dwim-at-point ()
  "Do-what-I-mean at point.
If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- headline: toggle latex fragments and inline images underneath.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, insert a link to an org file corresponding to the Word under point, or the region selected with the cursor (with spaces replaced with underscores), and refresh all inline images in current tree."
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    ;; skip over unimportant contexts
    (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
      (setq context (org-element-property :parent context)
            type (org-element-type context)))
    (pcase type
      ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
       (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
         (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

      (`headline
       (cond ((and (fboundp 'toc-org-insert-toc)
                   (member "TOC" (org-get-tags)))
              (toc-org-insert-toc)
              (message "Updating table of contents"))
             ((org-element-property :todo-type context)
              (org-todo
               (if (eq (org-element-property :todo-type context) 'done)
                   (or (car (dcao/org/get-todo-keywords-for (org-element-property :todo-keyword context)))
                       'todo)
                 'done)))
             ((string= "ARCHIVE" (car-safe (org-get-tags)))
              (org-force-cycle-archived))
             (t
              (dcao/org/refresh-inline-images)
              (org-remove-latex-fragment-image-overlays)
              (org-toggle-latex-fragment '(4)))))

      (`clock (org-clock-update-time-maybe))

      (`footnote-reference
       (org-footnote-goto-definition (org-element-property :label context)))

      (`footnote-definition
       (org-footnote-goto-previous-reference (org-element-property :label context)))

      ((or `planning `timestamp)
       (org-follow-timestamp-link))

      ((or `table `table-row)
       (if (org-at-TBLFM-p)
           (org-table-calc-current-TBLFM)
         (ignore-errors
           (save-excursion
             (goto-char (org-element-property :contents-begin context))
             (org-call-with-arg 'org-table-recalculate (or arg t))))))

      (`table-cell
       (org-table-blank-field)
       (org-table-recalculate)
       (when (and (string-empty-p (string-trim (org-table-get-field)))
                  (bound-and-true-p evil-mode))
         (evil-change-state 'insert)))

      (`babel-call
       (org-babel-lob-execute-maybe))

      (`statistics-cookie
       (save-excursion (org-update-statistics-cookies nil)))

      ((or `src-block `inline-src-block)
       (org-babel-execute-src-block))

      ((or `latex-fragment `latex-environment)
       (org-toggle-latex-fragment))

      (`link
       (let* ((lineage (org-element-lineage context '(link) t))
              (path (org-element-property :path lineage)))
         (if (or (equal (org-element-property :type lineage) "img")
                 (and path (image-type-from-file-name path)))
             (dcao/org/refresh-inline-images)
           (org-open-at-point))))

      (_ (progn
           (dcao/org/insert-link)
           (dcao/org/refresh-inline-images))))))

(defun dcao/org/dwim-daily ()
  (interactive)
  (find-file (concat dcao/org-root "journal.org"))
  (goto-char (point-min))
  (let* ((tstr (format-time-string "%F %a"))
         (p (re-search-forward (concat "* " tstr " <" tstr ">") nil 'past)))
    (unless p
      (insert (concat "\n* " tstr " <" tstr ">")))
    (org-id-get-create)
    ;(unless p
    ;  (org-end-of-subtree)
    ;  (insert (concat "\n<" (format-time-string "%F %a") ">\n")))
    (org-narrow-to-subtree)
    (org-end-of-subtree)))

; open daily note on startup
(dcao/org/dwim-daily)
#+end_src

#+begin_src emacs-lisp
(use-package evil-org
  :delight evil-org-mode
  :hook
  (org-mode . evil-org-mode)
  :init
  (defvar evil-org-key-theme '(navigation insert textobjects))
  (defvar evil-org-special-o/O '(table-row))
  (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)
  :config
  (add-hook 'org-open-at-point-functions #'evil-set-jump)
  ;; change `evil-org-key-theme' instead
  (advice-add #'evil-org-set-key-theme :override #'ignore))
#+end_src

#+begin_src emacs-lisp
; (require 'subr-x)
; (straight-use-package 'git)
; 
; (defun org-git-version ()
;   "The Git version of org-mode.
; Inserted by installing org-mode or when a release is made."
;   (require 'git)
;   (let ((git-repo (expand-file-name
;                    "straight/repos/org/" user-emacs-directory)))
;     (string-trim
;      (git-run "describe"
;               "--match=release\*"
;               "--abbrev=6"
;               "HEAD"))))
; 
; (defun org-release ()
;   "The release version of org-mode.
; Inserted by installing org-mode or when a release is made."
;   (require 'git)
;   (let ((git-repo (expand-file-name
;                    "straight/repos/org/" user-emacs-directory)))
;     (string-trim
;      (string-remove-prefix
;       "release_"
;       (git-run "describe"
;                "--match=release\*"
;                "--abbrev=0"
;                "HEAD")))))
; 
; (provide 'org-version)

(setq org-src-fontify-natively t
        org-edit-src-content-indentation 0
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-agenda-window-setup 'reorganize-frame
        org-agenda-restore-windows-after-quit t
        org-src-tab-acts-natively t)

(defun dcao/find-in-dir (dir)
  `(lambda () (interactive)
    (let ((default-directory ,dir))
      (call-interactively 'find-file))))

(defun org-show-current-heading-tidily ()
  (interactive)  ;Inteactive
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))

(defun dcao/org-update-all ()
  (interactive)
  (org-update-all-dblocks)
  (let ((current-prefix-arg '(4))) (call-interactively 'org-update-statistics-cookies)))

(use-package org
  :straight org-plus-contrib
  :hook (org-mode . org-indent-mode)
  :general
  (general-def
   "M-d" 'dcao/org/dwim-daily
   "C-S-j" 'org-move-subtree-down
   "C-S-k" 'org-move-subtree-up)
  (dcao-leader-def
   "o" '(:ignore t :which-key "org")
   "a" 'org-agenda
   "o c" 'org-capture
   "o f" (dcao/find-in-dir dcao/org-root)
   "f o" (dcao/find-in-dir dcao/org-root))
  (:keymaps 'org-mode-map
   "<C-tab>" 'org-show-current-heading-tidily
   "M-h" nil
   "M-e" 'dcao/org-update-all
   "M-l" 'org-insert-link
   "<C-M-right>" 'org-narrow-to-subtree
   "<C-M-left>" 'widen)
  (general-def
   :keymaps 'org-mode-map
   "C-M-l" 'org-narrow-to-subtree
   "C-M-h" 'widen)
  (:states 'normal
   :keymaps 'org-mode-map
   [return] 'dcao/org/dwim-at-point
   "RET" 'dcao/org/dwim-at-point)
  (:states 'insert
   :keymaps 'org-mode-map
   [return] 'org-return-indent
   "RET" 'org-return-indent)
  (dcao-local-leader-def
   :keymaps 'org-mode-map
   "*" 'org-list-make-subtree
   "a" 'org-archive-subtree
   "b" 'org-cycle-list-bullet
   "B" 'org-tree-to-indirect-buffer
   "d" 'org-update-all-dblocks
   "e" 'org-expiry-insert-created
   "r" 'org-refile
   "n" 'org-narrow-to-subtree
   "s" 'org-schedule
   "S" 'org-clone-subtree-with-time-shift
   "w" 'widen
   "x" 'org-export-dispatch
   "m" 'org-time-stamp
   "M" 'org-time-stamp-inactive
   "p" 'org-set-property
   "c" '(:ignore t :which-key "clock")
   "c i" 'org-clock-in
   "c o" 'org-clock-out
   "c c" 'org-clock-remove-overlays
   "c j" 'org-clock-goto
   "c d" (lambda () (interactive) (org-clock-display '(16))))

  :config
  (add-hook 'org-mode-hook
            (lambda ()
              (modify-syntax-entry ?< ".")
              (modify-syntax-entry ?> ".")))
  (advice-add #'org-return-indent :after #'dcao/fix-newline-and-indent-in-src-blocks)
  (advice-add 'org-refile :after
        (lambda (&rest _)
        (org-save-all-org-buffers)))
  (add-to-list 'org-modules 'org-habit))
        
; (require 'org-contacts)
(require 'org-habit)
; (require 'org-expiry)
#+end_src
*** org-contacts (for birthdays)
#+begin_src emacs-lisp
(use-package org-contrib
  :config
  (use-package org-contacts))
#+end_src
*** Fixing stupid angle brackets in source blocks
Angle brackets are highlighted as mismatched brackets, but it's just comparisons!!
#+begin_src emacs-lisp
(defun org-mode-<>-syntax-fix (start end)
  "Change syntax of characters ?< and ?> to symbol within source code blocks."
  (let ((case-fold-search t))
    (when (eq major-mode 'org-mode)
      (save-excursion
        (goto-char start)
        (while (re-search-forward "<\\|>" end t)
          (when (save-excursion
                  (and
                   (re-search-backward "[[:space:]]*#\\+\\(begin\\|end\\)_src\\_>" nil t)
                   (compare-strings (match-string 1) nil nil "begin" nil nil t)))
            ;; This is a < or > in an org-src block
            (put-text-property (point) (1- (point))
                               'syntax-table (string-to-syntax "_"))))))))

(defun org-setup-<>-syntax-fix ()
  "Setup for characters ?< and ?> in source code blocks.
Add this function to `org-mode-hook'."
  (setq syntax-propertize-function 'org-mode-<>-syntax-fix)
  (syntax-propertize (point-max)))

; doesn't work for now?
; (add-hook 'org-mode-hook #'org-setup-<>-syntax-fix)
#+end_src
*** org-agenda whiteboard
#+begin_src emacs-lisp
(defun dcao/temp ()
  (interactive) 
  (goto-char (point-min))
  (while (string-match "^[# ]" (buffer-substring-no-properties (line-beginning-position) (line-end-position))) (next-line)))

  (setq-default dcao/whiteboard-file (concat dcao/org-root "inbox.org"))
  (defun dcao/show-whiteboard-in-agenda ()
    "Insert contents of `dcao/whiteboard-file` into agenda buffer."
    (interactive)
    (unless (buffer-narrowed-p)
      (goto-char (point-min))
      (while (and (eq (get-text-property (line-beginning-position) 'org-agenda-type) 'agenda)
                  (not (eobp)))
        (forward-line))
      (forward-line)
      (let* ((inhibit-read-only t)
             (buf-text (with-temp-buffer
                         (insert-file-contents dcao/whiteboard-file)
                         (org-mode)
                         (font-lock-ensure (point-min) (point-max))
                         (let* ((max (progn
                                       (goto-char (point-max))
                                       (skip-chars-backward "\n[:space:]")
                                       (point)))
                                (min (progn
                                       (goto-char (point-min))
                                       (next-line 4)
                                       (point))))
                           (buffer-substring min max)))))
        (goto-char (point-min)) ; insert at start
        (insert (propertize "dcao/show-whiteboard-in-agenda (inbox.org):\n" 'face 'italic))
        (insert buf-text)
        (insert "\n\n"))
      ;; enable `font-lock-mode' in agenda view to enable formatting
      (font-lock-mode)))

  (add-hook 'org-agenda-finalize-hook 'dcao/show-whiteboard-in-agenda :append)
#+end_src
*** org-timeline
This is the code for org-timeline from https://github.com/deopurkar/org-timeline.

We're copy-pasting to use the fork of org-timeline with more stuff. We also make
some of our own changes:
- Include todos with deadline ranges.
- Fix bug with tasks that cross the date threshold (12am) - they're no longer offset
- Fix bug with tasks that cross the date and line threshold - it no longer crashes
- If an item is DONE, it can't be conflicted with
#+begin_src emacs-lisp
;;; org-timeline.el --- Add graphical view of agenda to agenda buffer. -*- lexical-binding: t -*-

;; Copyright (C) 2017 Matúš Goljer

;; Author: Matúš Goljer <matus.goljer@gmail.com>
;; Maintainer: Matúš Goljer <matus.goljer@gmail.com>
;; Version: 0.3.0
;; Created: 16th April 2017
;; Package-requires: ((dash "2.13.0") (emacs "24.3"))
;; Keywords: calendar
;; URL: https://github.com/Fuco1/org-timeline/

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Add graphical view of agenda to agenda buffer.

;; This package adds a graphical view of the agenda after the last
;; agenda line.  By default the display starts at 5 AM today and
;; goes up to 4 AM next day (this covers 24 hours).

;; Scheduled tasks or tasks with time ranges are rendered in the
;; display with `org-timeline-block' face.  Clocked entires are
;; displayed in `org-timeline-clocked' face.  The background of
;; timeslots which are in the past is highlighted with
;; `org-timeline-elapsed' face.

;; You can use custom color for a task by adding the property
;; `TIMELINE_FACE' with either a string which is a color name or a
;; list which specifies the face properties or a symbol which is
;; taken to be a face name.

;;; Code:

(require 'dash)

(require 'org-agenda)

(defgroup org-timeline ()
  "Graphical view of agenda in agenda buffer."
  :group 'org
  :prefix "org-timeline-")

(defgroup org-timeline-faces ()
  "Faces for org-timeline."
  :group 'org-timeline)

(defface org-timeline-block
  '((t (:background "CadetBlue")))
  "Face used for printing blocks with time range information.

These are blocks that are scheduled for specific time range or
have an active timestamp with a range."
  :group 'org-timeline-faces)

(defface org-timeline-conflict
  '((t (:background "OrangeRed")))
  "Face used for printing conflicting blocks with time range information."
  :group 'org-timeline-faces)

(defface org-timeline-elapsed
  '((t (:inherit default)))
  "Face used for highlighting elapsed portion of the day."
  :group 'org-timeline-faces)

(defface org-timeline-clocked
  '((t (:background "DarkOliveGreen")))
  "Face used for printing clocked blocks.

Clocked blocks appear in the agenda when `org-agenda-log-mode' is
activated."
  :group 'org-timeline-faces)

(defcustom org-timeline-default-duration
  nil
  "Default event duration for org-timeline")

(defmacro org-timeline-with-each-line (&rest body)
  "Execute BODY on each line in buffer."
  (declare (indent 0)
           (debug (body)))
  `(save-excursion
     (goto-char (point-min))
     ,@body
     (while (= (forward-line) 0)
       ,@body)))

(defun org-timeline--get-face ()
  "Get the face with which to draw the current block."
  (--if-let (org-entry-get (org-get-at-bol 'org-marker) "TIMELINE_FACE" t)
      (let ((read-face (car (read-from-string it))))
        (if (stringp read-face)
            (list :background read-face)
          read-face))
    (cond
     ((save-excursion
        (search-forward "Clocked:" (line-end-position) t))
      'org-timeline-clocked)
     ((face-at-point)
      `((:background ,(face-attribute (face-at-point) ':foreground nil 'default))))
     (t 'org-timeline-block))))

(defun org-timeline--add-elapsed-face (string current-offset)
  "Add `org-timeline-elapsed' to STRING's elapsed portion.

Return new copy of STRING."
  (let ((string-copy (copy-sequence string)))
    (when (< 0 current-offset)
      (put-text-property 0 current-offset 'font-lock-face 'org-timeline-elapsed string-copy))
    string-copy))

(defun org-timeline--generate-timeline ()
  "Generate the timeline string that will represent current agenda view."
  (let* ((start-offset 315) ; offset of calendar in minutes. a start offset of 15 sets the beginning to 00:00.
         (current-time (+ (* 60 (string-to-number (format-time-string "%H")))
                          (string-to-number (format-time-string "%M"))))
         (current-offset (/ (- current-time start-offset) 10))
         (slotline (org-timeline--add-elapsed-face
                    "|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |"
                    current-offset))
         (hourline (org-timeline--add-elapsed-face
                    "   |06:00|07:00|08:00|09:00|10:00|11:00|12:00|13:00|14:00|15:00|16:00|17:00|18:00|19:00|20:00|21:00|22:00|23:00|00:00|01:00|02:00|03:00|04:00|05:00|"
                    current-offset))
         (tasks nil))
    (org-timeline-with-each-line
      (-when-let* ((time-of-day (org-get-at-bol 'time-of-day))
                   (marker (org-get-at-bol 'org-marker))
                   (type (org-get-at-bol 'type))
                   (name (org-get-at-bol 'txt)))
        (when (member type (list "scheduled" "clock" "deadline" "timestamp"))
          (let ((duration (or (org-get-at-bol 'duration)
                              org-timeline-default-duration
                              0))
                (is-done (eql (org-get-at-bol 'face) (org-get-at-bol 'done-face))))
            (when (and (numberp duration)            
                       (< duration 0))            ;; This is events at midnight
              (cl-incf duration 1440))

            (let* ((hour (/ time-of-day 100))     ;; time-of-day is in HHMM notation
                   (minute (mod time-of-day 100))
                   (day-of-month (if (string= type "deadline") (org-get-at-bol 'date) (calendar-absolute-from-gregorian (org-get-at-bol 'date))))
                   (beg (+ (* day-of-month 1440) (* hour 60) minute))
                   (end (round (+ beg duration)))
                   (face (org-timeline--get-face)))
              (push (list beg end face name is-done) tasks))))))

    (setq tasks (nreverse tasks))
    (cl-labels ((get-start-pos (current-line beg) (+ 1 (* current-line (1+ (length hourline))) (/ (- beg start-offset) 10)))
                (get-end-pos (current-line end) (+ 1 (* current-line (1+ (length hourline))) (/ (- end start-offset) 10))))
      (let ((current-line 1)
            (current-line-offset 0)
            (current-day nil))
        (with-temp-buffer
          (insert hourline)
          (-each tasks
            (-lambda ((beg end face name is-done))
              (let* ((spans-multi-days (not (eq (/ beg 1440) (/ end 1440))))
                     (offset-to-mins (/ (* 3 (- start-offset 60)) 2))
                     (next-line-from-beg (+ beg offset-to-mins (- (if (<= (% beg 1440) offset-to-mins) 0 1440) (% beg 1440))))
                     (spans-multi-lines (>= end next-line-from-beg))
                     (new-current-day (/ beg 1440))
                     (beg-in-day (% beg 1440))
                     (end-in-day (if spans-multi-days (+ 1440 (% end 1440)) (% end 1440))))
                (when (not current-day)
                  (setq current-day new-current-day)
                  (insert "\n" (calendar-day-name (mod current-day 7) t t) slotline))
                (while (< current-day new-current-day)               ;; We have advanced a day
                  (cl-incf current-line)
                  (cl-incf current-day)
                  (save-excursion
                    (goto-char (point-max))
                    (insert "\n" (calendar-day-name (mod current-day 7) t t) slotline)))
                (let ((start-pos (if (< (% beg 1440) offset-to-mins) (get-start-pos (- current-line 1) (+ 1440 beg-in-day)) (get-start-pos current-line beg-in-day)))
                      (end-pos (if (and spans-multi-days spans-multi-lines)
                                   (progn
                                        ; Because of the limits of time ranges, this will execute once.
                                        ; But for future-proofing's sake :>
                                     (dotimes (i (- (/ end 1440) (/ beg 1440)))
                                       (cl-incf current-line)
                                       (cl-incf current-day)
                                       (save-excursion
                                         (goto-char (point-max))
                                         (insert "\n" (calendar-day-name (mod current-day 7) t t) slotline)))
                                     (get-end-pos current-line (- end-in-day 1440)))
                                 (get-end-pos current-line end-in-day))))
                  (if (and (not is-done) (or (get-text-property start-pos 'org-timeline-occupied)
                                             (get-text-property end-pos 'org-timeline-occupied)))
                      (put-text-property start-pos end-pos 'font-lock-face 'org-timeline-conflict)  ;; Warning face for conflicts
                    (put-text-property start-pos end-pos 'font-lock-face face))
                  (unless is-done (put-text-property start-pos end-pos 'org-timeline-occupied t))
                  (when name
                    (put-text-property start-pos end-pos 'help-echo name))))))
          (buffer-string))))))

(defun org-timeline-insert-timeline ()
  "Insert graphical timeline into agenda buffer."
  (interactive)
  (unless (buffer-narrowed-p)
    (goto-char (point-min))
    (while (and (eq (get-text-property (line-beginning-position) 'org-agenda-type) 'agenda)
                (not (eobp)))
      (forward-line))
    (forward-line)
    (let ((inhibit-read-only t)
          (tl (org-timeline--generate-timeline)))
      (goto-char (point-min)) ; insert timeline at start
      (insert tl)
      (insert (propertize (concat "\n" (make-string (/ (window-width) 2) ?─)) 'face 'org-time-grid) "\n"))
    ;; enable `font-lock-mode' in agenda view to display the "chart"
    (font-lock-mode)))

(provide 'org-timeline)
;;; org-timeline.el ends here
(add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
                                        ; To show all timed items
(setq org-timeline-default-duration 15)
#+end_src
*** Custom org-agenda command
#+begin_src emacs-lisp
(use-package org-ql
  :demand t
  :commands (org-dblock-write:org-ql)
  :straight (:host github :repo "dcao/org-ql" :branch "master")

  :config
  (setq org-ql-ask-unsafe-queries nil)
  (require 'org-ql-search))

; https://emacs.stackexchange.com/questions/18179/org-agenda-command-with-org-agenda-filter-by-tag-not-working
; https://stackoverflow.com/questions/10074016/org-mode-filter-on-tag-in-agenda-view/33444799#33444799
(defun my/org-match-at-point-p (match)
  "Return non-nil if headline at point matches MATCH.
Here MATCH is a match string of the same format used by
`org-tags-view'."
  (funcall (cdr (org-make-tags-matcher match))
           (org-get-todo-state)
           (org-get-tags-at)
           (org-reduced-level (org-current-level))))

(defun my/org-agenda-skip-without-match (match)
  "Skip current headline unless it matches MATCH.

Return nil if headline containing point matches MATCH (which
should be a match string of the same format used by
`org-tags-view').  If headline does not match, return the
position of the next headline in current buffer.

Intended for use with `org-agenda-skip-function', where this will
skip exactly those headlines that do not match." 
  (save-excursion
    (unless (org-at-heading-p) (org-back-to-heading)) 
    (let ((next-headline (save-excursion
                           (or (outline-next-heading) (point-max)))))
      (if (my/org-match-at-point-p match) nil next-headline))))

; https://stackoverflow.com/questions/10074016/org-mode-filter-on-tag-in-agenda-view
(defun zin/org-agenda-skip-tag (tag &optional others)
  "Skip all entries that correspond to TAG.

If OTHERS is true, skip all entries that do not correspond to TAG."
  (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
        (current-headline (or (and (org-at-heading-p)
                                   (point))
                              (save-excursion (org-back-to-heading)))))
    (if others
        (if (not (member tag (org-get-tags-at current-headline)))
            next-headline
          nil)
      (if (member tag (org-get-tags-at current-headline))
          next-headline
        nil))))

(setq org-agenda-custom-commands
      '(("a" "dcao view"
         ((agenda "" ((org-agenda-span 'week)
                      (org-agenda-skip-function '(zin/org-agenda-skip-tag "lec")))))
         ((org-use-tag-inheritance nil)))
        ("l" "lectures"
         ((org-ql-block '(and (todo) (scheduled :to 0) (tags-local "lec"))
                        ((org-ql-block-header "overdue lectures")))))
        ("g" "goals n focus"
         ((org-ql-block '(tags-local "goal")
                        ((org-ql-block-header "goals")))
          (org-ql-block '(tags-local "focus")
                        ((org-ql-block-header "focus")))))
        ("t" "dcao view other thing"
         ((tags-todo "focus")
          (agenda))
         ((org-agenda-sorting-strategy '(priority-down))
          (org-use-tag-inheritance nil)
          (org-agenda-overriding-header "post-its:")))))
          

(defadvice org-agenda (around split-vertically activate)
  (let ((split-width-threshold 120))  ; or whatever width makes sense for you
    ad-do-it))
#+end_src
*** texfrag
#+begin_src emacs-lisp
(use-package texfrag
  :straight (:host github :repo "TobiasZawada/texfrag" :branch "autogen")
  :general
  (dcao-local-leader-def
   :keymaps 'org-mode-map
   "l" 'texfrag-document)
  :config
  (texfrag-global-mode)
  (setq texfrag-scale 0.6))
#+end_src
*** org-roam
#+begin_src emacs-lisp
(defun dcao/org-roam-complete-everywhere ()
  "Provides completions for links for any word at point.
This is a `completion-at-point' function, and is active when
`org-roam-completion-everywhere' is non-nil."
  (when (and org-roam-completion-everywhere
             (thing-at-point 'word)
             (not (save-match-data (org-in-regexp org-link-any-re))))
    (let ((bounds (bounds-of-thing-at-point 'word)))
      (list (car bounds) (cdr bounds)
            (completion-table-dynamic
             (lambda (_)
               (funcall #'org-roam--get-titles)))
            :exit-function
            (lambda (str _status)
              (delete-char (- (length str)))
              (let* ((id1 (caar (org-roam-db-query [:select id :from nodes :where (= title $s1)] (substring-no-properties str))))
                     (id2 (if id1 id1 (caar (org-roam-db-query [:select node-id :from aliases :where (= alias $s1)] (substring-no-properties str))))))
              (insert "[[id:" id2 "][" (substring-no-properties str) "]]")))))))

(use-package org-roam
  :demand t
  :commands (org-roam-db-autosync-mode org-roam-db-query)
  :straight (:host github :repo "org-roam/org-roam"
             :files (:defaults "extensions/*"))  
  :hook (org-roam-mode . turn-on-visual-line-mode)
  :general
  (:keymap org-mode-map
           "C-c C-i" 'org-id-get-create)
  :custom
  (org-roam-directory dcao/org-root)
  :general
  (general-def
    "M-o" 'org-roam-node-find
    "M-b" 'org-roam-buffer-toggle)
  (dcao-leader-def
    "o b" 'org-roam-buffer-toggle
    "o i" 'org-roam-node-insert
    "o d" 'org-roam-node-find
    "o R" 'org-roam-db-sync
    "d" 'org-roam-node-find
    "o g" 'org-roam-graph)
  (dcao-local-leader-def
    :keymaps 'org-mode-map
    "i" 'org-id-get-create)

  :config
  (setq org-roam-capture-templates '(("d" "default" plain "%?"
     :target (file+head "notes/%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
     :unnarrowed t)))
  (setq org-roam-completion-everywhere t
        org-roam-completion-functions '(org-roam-complete-link-at-point dcao/org-roam-complete-everywhere))
  (org-roam-db-autosync-enable))

; So that org mode handles txt files too
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

; So that agenda picks up on these txt files
(setq org-agenda-file-regexp "\\`[^.].*\\(\\.org\\|\\.txt\\)\\'")
#+end_src
**** org-roam-ui
#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
  :after org-roam
  ; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ; a hookable mode anymore, you're advised to pick something yourself
  ; if you don't care about startup time, use
  ; :hook (after-init . org-roam-ui-mode)
  :general
  (general-def
   "M-B" 'org-roam-ui-open)
  (dcao-leader-def
   "o B" 'org-roam-ui-open)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start nil))
#+end_src
**** fixing titles in agenda
org agenda uses the =category= property of a file to set the filename that it shows. i just want it to use the =title= property. so i set the function which gets the category to just get the title :^)

#+begin_src emacs-lisp
; (defun org-get-category (&optional pos force-refresh)
;   (org-roam-db--file-title))

; (defun org-get-category (&optional pos force-refresh)
;   (or (assoc "CATEGORY" (org-entry-properties))
;       (org-roam-db--file-title)))

(defun org-get-category (&optional pos force-refresh)
  "Get the category applying to position POS."
  (save-match-data
    (when force-refresh (org-refresh-category-properties))
    (let ((pos (or pos (point))))
      (if (org-element--cache-active-p)
          ;; Sync cache.
          (org-with-point-at (org-element-property :begin (org-element-at-point pos))
            (or (org-entry-get-with-inheritance "CATEGORY")
                "???"))
        (or (org-entry-get-with-inheritance "CATEGORY")
            (org-roam-db--file-title))))))

#+end_src
**** show correct context on opening node
when we open a node, we want to see the tree context regardless of if the file was opened previously or not!

#+begin_src emacs-lisp
(advice-add 'org-roam-node-visit :after (lambda (node &optional other-window force) (interactive) (org-show-context)))
#+end_src
*** org-krita
#+begin_src emacs-lisp
(use-package arc-mode)
(use-package org-krita
  :straight (:host github :repo "lepisma/org-krita" :branch "master" :files ("resources" "resources" "*.el" "*.el"))
  :general
  (dcao-local-leader-def
    :keymaps 'org-mode-map
    "k" 'org-krita-insert-new-image)
  :config
  (add-hook 'org-mode-hook 'org-krita-mode))
#+end_src
*** org-hyperscheduler
#+begin_src emacs-lisp
(use-package org-hyperscheduler
  :straight
  (:repo "dmitrym0/org-hyperscheduler"
   :host github
   :type git
   :files ("*"))
  :general
  (dcao-leader-def
   "A" 'org-hyperscheduler-open
   "o a" '(:ignore t :which-key "org-hyperscheduler")
   "o a a" 'org-hyperscheduler-open
   "o a s" 'org-hyperscheduler-stop-server)

  :config
  (setq org-hyperscheduler-readonly-mode nil))
#+end_src
*** Focus
**** org-superstar
#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :config
  (setq org-superstar-remove-leading-stars nil)
  (setq org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))
  ;; Stop cycling bullets to emphasize hierarchy of headlines.
  (setq org-superstar-cycle-headline-bullets nil))
#+end_src
**** Modifying org faces for variable font mode
Making sure that monospaced parts are monospaced:
#+begin_src emacs-lisp
(with-eval-after-load 'org-indent
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))

    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-date nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-special-keyword nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-document-info-keyword nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-meta-line nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch))

;; TODO: define minor mode that sets and unsets face attributes for org headers
;; when minor mode enabled: inherit from variable pitch, line height, all that
;; see https://github.com/lepisma/rogue/blob/75ab1c3422b409f41daa4c003b931e869eed0914/config.el#L205
;; when disabled: inherit from outline-n

(define-minor-mode dcao/fancy-org-headers-mode
    "Customizes org level faces"
    :init-value nil
    :global nil
    (if dcao/fancy-org-headers-mode
          (when (eq major-mode 'org-mode)
            (setq line-spacing (+ line-spacing 2))
            (set-face-attribute 'org-level-1 nil :height 1.3)
            (set-face-attribute 'org-level-2 nil :height 1.2 :slant 'italic)
            (set-face-attribute 'org-level-3 nil :height 1.1)
            (set-face-attribute 'org-level-4 nil :height 1.1)
            (set-face-attribute 'org-level-5 nil :height 1.1)
            (set-face-attribute 'org-level-6 nil :height 1.1)
            (set-face-attribute 'org-level-7 nil :height 1.1)
            (set-face-attribute 'org-level-8 nil :height 1.1))
        (set-face-attribute 'org-level-1 nil :inherit 'outline-1 :height 1.0)
        (setq line-spacing (- line-spacing 2))
        (set-face-attribute 'org-level-2 nil :inherit 'outline-2 :height 1.0 :slant 'normal)
        (set-face-attribute 'org-level-3 nil :inherit 'outline-3 :height 1.0)
        (set-face-attribute 'org-level-4 nil :inherit 'outline-4 :height 1.0)
        (set-face-attribute 'org-level-5 nil :inherit 'outline-5 :height 1.0)
        (set-face-attribute 'org-level-6 nil :inherit 'outline-6 :height 1.0)
        (set-face-attribute 'org-level-7 nil :inherit 'outline-7 :height 1.0)
        (set-face-attribute 'org-level-8 nil :inherit 'outline-8 :height 1.0)))
#+end_src
**** Olivetti
#+begin_src emacs-lisp
(use-package olivetti
  :hook
  (org-mode . olivetti-mode)
  (markdown-mode . olivetti-mode)
  :commands olivetti-mode
  :config
  ; (setq-default olivetti-body-width 96)
  (setq-default olivetti-body-width 84)
  (setq-default olivetti-minimum-body-width 40))
#+end_src
**** focus mode
#+begin_src emacs-lisp
(define-minor-mode dcao/focus-mode
    "Toggle buffer-local `olivetti-mode' with additional parameters."
    :init-value nil
    :global nil
    (if dcao/focus-mode
        (progn
          (olivetti-mode 1)
          (variable-pitch-mode 1)
          (when (eq major-mode 'org-mode)
            (org-superstar-mode 1)
            (dcao/fancy-org-headers-mode 1)))
      (olivetti-mode -1)
      (variable-pitch-mode -1)
      (when (eq major-mode 'org-mode)
        (org-superstar-mode -1)
        (dcao/fancy-org-headers-mode -1))))

(dcao-local-leader-def
  :keymaps 'org-mode-map
   "f" 'dcao/focus-mode)
#+end_src
**** prettify symbols and font things
#+begin_src emacs-lisp
; (set-face-attribute 'org-level-8 nil :weight 'bold :inherit 'default)
; ;; Low levels are unimportant => no scaling
; (set-face-attribute 'org-level-7 nil :inherit 'org-level-8)
; (set-face-attribute 'org-level-6 nil :inherit 'org-level-8)
; (set-face-attribute 'org-level-5 nil :inherit 'org-level-8)
; (set-face-attribute 'org-level-4 nil :inherit 'org-level-8)
; ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
; (set-face-attribute 'org-level-3 nil :inherit 'org-level-8) ;\large
; (set-face-attribute 'org-level-2 nil :inherit 'org-level-8) ;\Large
; (set-face-attribute 'org-level-1 nil :inherit 'org-level-8) ;\LARGE

(defun org-pretty-symbols-mode ()
    (push '("#+title: "        . "") prettify-symbols-alist)
    (push '("#+subtitle: "     . "") prettify-symbols-alist)
    (push '("#+author: "       . "- ") prettify-symbols-alist)
    (push '(":properties:"     . "⋯") prettify-symbols-alist)
    (push '(":PROPERTIES:"     . "⋯") prettify-symbols-alist)
    (push '(":LOGBOOK:"        . "⧖") prettify-symbols-alist)
    (push '("#+begin_src"      . "λ") prettify-symbols-alist)
    (push '("#+end_src"        . "⋯") prettify-symbols-alist)
    (push '("#+results:"       . "»") prettify-symbols-alist)
    (push '(":end:"            . "⋯") prettify-symbols-alist)
    (push '(":END:"            . "⋯") prettify-symbols-alist)
    (push '(":results:"        . "⋯") prettify-symbols-alist)
    (push '("#+name:"          . "-") prettify-symbols-alist)
    (push '("#+begin_example"  . "†") prettify-symbols-alist)
    (push '("#+end_example"    . "⋯") prettify-symbols-alist)
    (push '("#+begin_quote"    . "𐄚") prettify-symbols-alist)
    (push '("#+end_quote"      . "𐄚") prettify-symbols-alist)
    (push '("#+tblfm:"         . "Σ") prettify-symbols-alist)
    (push '("\\\\"             . "↩") prettify-symbols-alist)
    (prettify-symbols-mode t))

; (add-hook 'org-mode-hook 'org-superstar-mode)
(add-hook 'org-mode-hook 'org-pretty-symbols-mode)
#+end_src
*** Notifications (macOS)
#+begin_src emacs-lisp
(require 'appt)

(setq appt-time-msg-list nil)    ;; clear existing appt list
(setq appt-display-interval '10)
(setq
  appt-message-warning-time '10  ;; send first warning 10 minutes before appointment
  appt-display-mode-line nil     ;; don't show in the modeline
  appt-display-format 'window)   ;; pass warnings to the designated window function
(setq appt-disp-window-function (function ct/appt-display-native))

(appt-activate 1)                ;; activate appointment notification
; (display-time) ;; Clock in modeline

(defun ct/send-notification (title msg)
  (let ((notifier-path (executable-find "terminal-notifier")))
       (start-process 
           "Appointment Alert" 
           "*Appointment Alert*" ; use `nil` to not capture output; this captures output in background
           notifier-path 
           "-message" msg 
           "-title" title 
           "-sender" "org.gnu.Emacs"
           "-activate" "org.gnu.Emacs"
           "-sound" "Breeze")))
(defun ct/appt-display-native (min-to-app new-time msg)
  (ct/send-notification 
    (format "%s" msg)
    (format "in %s min" min-to-app)))

;; Agenda-to-appointent hooks
(org-agenda-to-appt)             ;; generate the appt list from org agenda files on emacs launch
(run-at-time "24:01" 3600 'org-agenda-to-appt)           ;; update appt list hourly
(add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt) ;; update appt list on agenda view
#+end_src
*** agenda speedup
to speed up agenda building, here are some optimizations:
#+begin_src emacs-lisp
; not needed if we don't have org-enforce-todo-dependencies
(setq org-agenda-dim-blocked-tasks nil)
; Stop preparing agenda buffers on startup:
(setq org-agenda-inhibit-startup t)
; Disable tag inheritance for agendas:
(setq org-agenda-use-tag-inheritance nil)
(setq org-agenda-ignore-properties '(effort stats category appt))
#+end_src
*** org-transclusion
#+begin_src emacs-lisp
(use-package org-transclusion
  :hook (org-mode . org-transclusion-add-all)
  :straight
  (:host github
           :repo "nobiot/org-transclusion"
           :branch "main"
           :files ("*.el"))
  :general
  (dcao-local-leader-def
   :keymaps 'org-mode-map
   "t" '(:ignore t :which-key "transclusion")
   "t t" 'org-transclusion-make-from-link
   "t e" 'org-transclusion-live-sync-start
   "t T" 'org-transclusion-mode))
#+end_src
*** TODO Gathering clocks for subtasks
Adapted from https://emacs.stackexchange.com/questions/41393/merging-clock-logs-together-in-org-mode
#+begin_src emacs-lisp
(defun org-collect-clock-entries (drawer &optional remove)
  "Collect all clock entries from DRAWER.
Remove them from DRAWER if REMOVE is non-nil."
  (cl-assert (eq (org-element-type drawer) 'drawer)
             nil
             "Expected a drawer got %s" (org-element-type drawer))
  (when (string-equal (org-element-property :drawer-name drawer)
                      (or (org-log-into-drawer) "LOGBOOK"))
    (let ((ret
           (cl-loop
            for element in-ref (org-element-contents drawer)
            if (eq (org-element-type element) 'clock)
            collect element
            and if remove do (setf element nil))))
      (org-element-set-contents
       (cl-remove nil (org-element-contents drawer)))
      ret)))

(defun org-element-clock-start<= (c1 c2)
  "Compare two clock elements as returned by `org-element-clock-parser'
and return non-nil if the C1 starts not later than c2."
  (setq c1 (org-element-property :value c1)
        c2 (org-element-property :value c2))
  (cl-loop with val1 with val2
           for test in '(:year-start :month-start :day-start :hour-start :minute-start)
           do (setq val1 (org-element-property test c1) val2 (org-element-property test c2))
           if (< val1 val2)
           return t
           if (> val1 val2)
           return nil
           finally return t))

(defun org-dblock-write:clocklist (params)
  (save-restriction
    (org-narrow-to-subtree)
    (let* ((data (org-element-parse-buffer))
           (clocks (apply #'append
                            (org-element-map data 'drawer
                              (lambda (el) (org-collect-clock-entries el t))))))
      (setq clocks (sort clocks #'org-element-clock-start<=))
      (print clocks)
      (insert (org-element-interpret-data clocks)))))
#+end_src
*** Set calendar location
This is so that we can show sunrise/sunset times in the agenda via the =S= command

#+begin_src emacs-lisp
(setq calendar-latitude 32.87232209452121)
(setq calendar-longitude -117.20323107791246)
(setq calendar-location-name "La Jolla, CA")
#+end_src
*** latex export template
#+begin_src prog
(add-to-list 'org-latex-classes
             '("tufte"
               "\\documentclass{tufte-handout}
\\usepackage[utf8]{inputenc}
\\usepackage[shortlabels]{enumitem}
\\usepackage{amsmath}
\\newcommand{\\Mod}[1]{\\ \\mathrm{mod}\\ #1}
\\usepackage{amssymb,amsthm}
\\usepackage{hyperref}
\\usepackage[super]{nth}
\\usepackage{booktabs}
\\usepackage{siunitx}
\\usepackage{circuitikz}
\\usepackage{qtree}
\\usepackage{xcolor}
\\usepackage{soul}
\\usepackage{forest}
\\usepackage{cleveref}
\\usepackage{microtype}

\\usepackage[T1]{fontenc}
\\usepackage{ETbb}
\\let\\oldstylenums\\textosf

\\newcommand*{\\permcomb}[4][0mu]{{{}^{#3}\\mkern#1#2_{#4}}}
\\newcommand*{\\perm}[1][-3mu]{\\permcomb[#1]{P}}
\\newcommand*{\\ans}[1]{\\colorbox{GreenYellow}{#1}}

\\newcommand{\\todo}[1]{{\\color{orange!80!black}[\\textsl{#1}]}}
\\newcommand{\\mtodo}[1]{{\\marginnote{\\todo{#1}}}}

\\newcommand{\\NA}{---}
\\newcommand{\\babble}{\\smallcaps{babble}}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

(setq org-latex-default-class "tufte")
#+end_src
** HTML
#+begin_src emacs-lisp
(setq sgml-basic-offset 4)
#+end_src
** LSP
#+begin_src text
(setq lsp-keymap-prefix "C-SPC m")

(use-package project :straight (:local-repo nil))
(defun project-root (project)
    (car (project-roots project)))
(use-package eglot
  :general
  (dcao-local-leader-def
    :keymaps 'eglot-mode-map
    "f" 'eglot-format
    "r" 'xref-find-references
    "d" 'xref-find-definitions)
  :config
  (setq eglot-confirm-server-initiated-edits nil)
  (add-to-list 'eglot-server-programs '(elixir-mode "~/Downloads/elixir-ls-1.11/language_server.sh")))

(defun +lsp--flycheck-eglot-init (checker callback)
  "CHECKER is the checker (eglot).
CALLBACK is the function that we need to call when we are done, on all the errors."
  (cl-labels
      ((flymake-diag->flycheck-err
        (diag)
        (with-current-buffer (flymake--diag-buffer diag)
          (flycheck-error-new-at-pos
           (flymake--diag-beg diag)
           (pcase (flymake--diag-type diag)
             ('eglot-note 'info)
             ('eglot-warning 'warning)
             ('eglot-error 'error)
             (_ (error "Unknown diagnostic type, %S" diag)))
           (flymake--diag-text diag)
           :end-pos (flymake--diag-end diag)
           :checker checker
           :buffer (current-buffer)
           :filename (buffer-file-name)))))
    ;; NOTE: Setting up eglot to automatically create flycheck errors for the buffer.
    ;; Internally, this sets the lambda as the callback to be used by eglot
    ;; when it receives a publishDiagnostics method from the server
    (eglot-flymake-backend
     (lambda (flymake-diags &rest _)
       (funcall callback
                'finished
                (mapcar #'flymake-diag->flycheck-err flymake-diags))))))

(defun +lsp--flycheck-eglot-available-p ()
  (bound-and-true-p eglot--managed-mode))

(flycheck-define-generic-checker 'eglot
  "Report `eglot' diagnostics using `flycheck'."
  :start #'+lsp--flycheck-eglot-init
  :predicate #'+lsp--flycheck-eglot-available-p
  :modes '(prog-mode text-mode))

(push 'eglot flycheck-checkers)

(add-hook 'eglot-managed-mode-hook
  (defun +lsp-eglot-prefer-flycheck-h ()
    (when eglot--managed-mode
      (when-let ((current-checker (flycheck-get-checker-for-buffer)))
        (unless (equal current-checker 'eglot)
          (flycheck-add-next-checker 'eglot current-checker)))
      (flycheck-add-mode 'eglot major-mode)
      (flycheck-mode 1))))

;;; flycheck-eglot.el ends here
(add-hook 'rust-mode-hook 'eglot-ensure)
; (use-package lsp-mode
;   :init
;   (add-hook 'rust-mode-hook #'lsp)
;   :config
;   (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
;   (setq lsp-prefer-flymake nil)
;   (setq lsp-rust-server 'rust-analyzer)
;   (setq lsp-rust-analyzer-server-command '("rust-analyzer"))
; 
;   :general
;   (dcao-local-leader-def
;     :keymaps 'lsp-mode-map
;     "" lsp-command-map))
; 
; ;; optionally
; (use-package lsp-ui :commands lsp-ui-mode)
; (use-package lsp-haskell)
; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src
#+begin_src emacs-lisp
(setq lsp-keymap-prefix "C-SPC m")
(use-package lsp-mode)
(defun lsp-workspace-kill ()
  (interactive)
  (lsp-workspace-shutdown))
(add-hook 'rust-mode-hook #'lsp)
#+end_src

** Yaml
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode (("\\.yaml\\'" . yaml-mode)
         ("\\.yml\\'" . yaml-mode)))
#+end_src
** C
#+begin_src emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset 4)

(use-package flycheck-pkg-config
  :commands (flycheck-pkg-config))
#+end_src
** Zig
#+begin_src emacs-lisp
(use-package zig-mode
  :mode (("\\.zig\\'" . zig-mode)))
#+end_src
** Ledger
*** Beancount
#+begin_src emacs-lisp
(use-package beancount
  :straight (:host github :repo "beancount/beancount-mode" :branch "main")
  :mode ("\\.beancount\\'" . beancount-mode))
#+end_src
*** Ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :mode ("\\.ldg\\'" . ledger-mode)
  :general
  (dcao-leader-def
    "l" '(nil :which-key "ledger")
    "l l" (lambda () (interactive) (find-file "~/default/ledger/spending.ldg")))
  :config
  (setq ledger-default-date-format ledger-iso-date-format))
#+end_src
** Julia
#+begin_src emacs-lisp
(use-package julia-mode
  :mode (("\\.jl\\'" . julia-mode)))
#+end_src
** Elixir
#+begin_src emacs-lisp
(use-package elixir-mode)

;; This is optional. It automatically runs `M-x eglot` for you whenever you are in `elixir-mode`
(add-hook 'elixir-mode-hook 'eglot-ensure)

#+end_src
** Array langs
*** BQN
bqn console stuff:
#+begin_src emacs-lisp
; (require 'comint)
; 
; ;; (defconst bqn-console-version "1.1.1"
; ;;   "`bqn-console' version")
; 
; (defgroup bqn-console nil
;   "REPL integration extention for `bqn-mode'"
;   :group 'applications
;   :group 'j
;   :prefix "bqn-console-")
; 
; (defcustom bqn-console-cmd "/Users/David/Downloads/BQN/REPL"
;   "Name of the executable used for the BQN REPL session"
;   :type 'string
;   :group 'bqn-console)
; 
; (defcustom bqn-console-cmd-args '()
;   "Arguments to be passed to the bqn-console-cmd on start"
;   :type 'string
;   :group 'bqn-console)
; 
; (defcustom bqn-console-cmd-init-file nil
;   "Full path to the file who's contents are sent to the
;   bqn-console-cmd on start
; Should be NIL if there is no file not the empty string"
;   :type 'string
;   :group 'bqn-console)
; 
; (defcustom bqn-console-cmd-buffer-name "BQN"
;   "Name of the buffer which contains the bqn-console-cmd session"
;   :type 'string
;   :group 'bqn-console)
; 
; (defvar bqn-console-comint-input-filter-function nil
;   "BQN mode specific mask for comint input filter function")
; 
; (defvar bqn-console-comint-output-filter-function nil
;   "BQN mode specific mask for comint output filter function")
; 
; (defvar bqn-console-comint-preoutput-filter-function nil
;   "BQN mode specific mask for comint preoutput filter function")
; 
; ;; 'comint-preoutput-filter-functions
; ;; (lambda ( output )
; ;;   (if (string-match "^[ \r\n\t]+" output)
; ;;       (concat "  " (replace-match "" nil t output))
; ;;     output))))
; 
; (defun bqn-console-create-session ()
;   "Starts a comint session wrapped around the bqn-console-cmd"
;   (setq comint-process-echoes t)
;   (apply 'make-comint bqn-console-cmd-buffer-name
;          bqn-console-cmd bqn-console-cmd-init-file bqn-console-cmd-args)
;   (mapc
;    (lambda ( comint-hook-sym)
;      (let ((local-comint-hook-fn-sym
;             (intern
;              (replace-regexp-in-string
;               "s$" "" (concat "bqn-console-" (symbol-name comint-hook-sym))))))
;        (when (symbol-value local-comint-hook-fn-sym)
;          (add-hook comint-hook-sym (symbol-value local-comint-hook-fn-sym)))))
;    '(comint-input-filter-functions
;      comint-output-filter-functions
;      comint-preoutput-filter-functions)))
; 
; (defun bqn-console-ensure-session ()
;   "Checks for a running bqn-console-cmd comint session and either
;   returns it or starts a new session and returns that"
;   (or (get-process bqn-console-cmd-buffer-name)
;       (progn
;         (bqn-console-create-session)
;         (get-process bqn-console-cmd-buffer-name))))
; 
; (define-derived-mode inferior-bqn-mode comint-mode "Inferior BQN"
;   "Major mode for BQN inferior process.")
; 
; ;;;###autoload
; (defun bqn-console ()
;   "Ensures a running bqn-console-cmd session and switches focus to
; the containing buffer"
;   (interactive)
;   (switch-to-buffer-other-window (process-buffer (bqn-console-ensure-session)))
;   (inferior-bqn-mode))
; 
; (defun bqn-console-execute-string (string)
;   "Sends string to BQN console"
;   (let ((session (bqn-console-ensure-session)))
;     (with-current-buffer (process-buffer session)
;       (goto-char (point-max))
;       (insert-before-markers (concat string "\n")))
;     (comint-simple-send (process-buffer session) string)))
; 
; (defun bqn-console-execute-region ( start end )
;   "Sends current region to the bqn-console-cmd session and exectues it"
;   (interactive "r")
;   (when (= start end)
;     (error "Region is empty"))
;   (let ((region (buffer-substring-no-properties start end)))
;     (bqn-console-execute-string region)))
; 
; (defun bqn-console-execute-line ()
;   "Sends current line to the bqn-console-cmd session and exectues it"
;   (interactive)
;   (bqn-console-execute-region (point-at-bol) (point-at-eol)))
; 
; (defun bqn-console-execute-buffer ()
;   "Sends current buffer to the bqn-console-cmd session and exectues it"
;   (interactive)
;   (bqn-console-execute-region (point-min) (point-max)))
; 
; (provide 'bqn-console)
;;; bqn-console.el ends here
#+end_src

#+begin_src emacs-lisp
; (use-package bqn-mode
;   :general
;   ("C-c C-s" 'bqn-console-execute-line
;    "C-c C-r" 'bqn-console-execute-region)
;   
;   :straight (:host github :type git :repo "mlochbaum/BQN"
;              :files ("editors/emacs/bqn-*.el"))
; 
;   :custom
;   (bqn-mode-map-prefix "H-"))
#+end_src

#+begin_src emacs-lisp
;; Use Iosevka in BQN mode since it gives each symbol the correct width
(setq-default buffer-face-mode-face '(:family "Iosevka Custom"))
(defun dcao/bqn-mode-font ()
  "Sets a fixed width (monospace) font in current buffer"
  (interactive)
  (buffer-face-mode))

(use-package bqn-mode
  :straight (:host github :type git :repo "dcao/bqn-mode")
  :general
  (dcao-leader-def
   "c c" (lambda () (interactive) (find-file "/Users/David/Downloads/scratch.bqn"))
   "c C" 'calc)
  (dcao-local-leader-def
   :keymaps 'bqn-mode-map
   "z" 'bqn-switch-to-interactive
   "s" 'bqn-interactive-send-region
   "l" 'bqn-interactive-send-buffer
   "c" 'bqn-interactive-send-line)
  :custom
  (bqn-mode-map-prefix "\\ ")
  (bqn-interactive-cmd "/Users/David/Downloads/CBQN/BQN")
  :config
  (add-hook 'bqn-mode-hook #'dcao/bqn-mode-font))

#+end_src
**** TODO Steal things from APL mode
- [ ] =gnu-apl--make-base-mode-map=, which takes a prefix as an argument
  - This is already done in the code, but
  - We should fix H-SPC tho
- [ ] Adapting this for use in the interpreter/comint mode (see =gnu-apl-interactive.el= and =make-interactive-mode-map= - they define their own custom major mode for APL comint terminals!)
*** q
#+begin_src emacs-lisp
(use-package q-mode)
#+end_src
*** k
#+begin_src emacs-lisp
(use-package j-mode
  :config
  (setq j-console-cmd "jconsole"))
#+end_src
* Apps
** calfw
#+begin_src emacs-lisp
(use-package calfw
  :commands cfw:open-org-calendar
  :general
  (dcao-leader-def
   "C" 'cfw:open-org-calendar)
  :config
  (use-package calfw-org))
#+end_src
** elfeed
#+begin_src emacs-lisp
(use-package elfeed
  :general
  (dcao-leader-def
   "o e" 'elfeed))

  :config
  (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
  (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
  (use-package elfeed-web)
  (use-package elfeed-goodies
    :config
    (elfeed-goodies/setup))
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat dcao/org-root "elfeed.org"))))
#+end_src
** Notetaking - pdf-tools + org-noter + helm-bibtex
#+begin_src emacs-lisp
(defun evil-collection-pdf-view-goto-page (&optional page)
  "`evil' wrapper around `pdf-view-last-page'."
  (interactive "P")
  (if page
      (pdf-view-goto-page page)
    (let ((hscroll (window-hscroll)))
      (pdf-view-last-page)
      (image-eob)
      (image-set-window-hscroll hscroll))))

(defun evil-collection-pdf-view-goto-first-page (&optional page)
  "`evil' wrapper around `pdf-view-first-page'."
  (interactive "P")
  (if page
      (pdf-view-goto-page page)
    (let ((hscroll (window-hscroll)))
      (pdf-view-first-page)
      (image-bob)
      (image-set-window-hscroll hscroll))))

(use-package pdf-tools
  :general
  (:keymaps 'pdf-view-mode-map
   "j" 'pdf-view-next-line-or-next-page
   "k" 'pdf-view-previous-line-or-previous-page
   "C-u" 'pdf-view-previous-page-command
   "C-d" 'pdf-view-next-page-command

   "g" nil
   "g g" 'evil-collection-pdf-view-goto-first-page
   "G" 'evil-collection-pdf-view-goto-page
   
   "f" 'pdf-links-isearch-link
   "F" 'pdf-links-action-perform
   "h" 'image-backward-hscroll
   "^" 'image-bol
   "$" 'image-eol
   "l" 'image-forward-hscroll
   
   "/" 'isearch-forward
   "?" 'isearch-backward
   "n" 'isearch-repeat-forward
   "N" 'isearch-repeat-backward

   "zd" 'pdf-view-dark-minor-mode
   "zm" 'pdf-view-midnight-minor-mode
   "zp" 'pdf-view-printer-minor-mode

   "i" 'org-noter-insert-note
   
   ; refresh
   "g r" 'revert-buffer)
  :config
  ;; initialise
  (pdf-tools-install)
  ;; open pdfs scaled to fit page
  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1))

(use-package org-noter
  :general
  (:keymaps '(override org-noter-docs-mode-map org-noter-notes-mode-map)
   "C-k" 'org-noter-sync-prev-page-or-chapter
   "C-j" 'org-noter-sync-next-page-or-chapter)
  (dcao-leader-def
    "o n" 'org-noter)
  :custom
  (org-noter-always-create-frame nil)
  (org-noter-default-notes-file-names '("papers.org"))
  (org-noter-notes-search-path (list dcao/org-root)))
#+end_src
*** helm-bibtex
#+begin_src emacs-lisp
(use-package helm-bibtex
  :general
  (dcao-leader-def
    "o p" 'helm-bibtex)
  :config
  (setq bibtex-completion-bibliography (list (concat dcao/org-root "../papers/papers.bib"))
        bibtex-library-completion-path (list (concat dcao/org-root "../papers"))
        bibtex-completion-pdf-field "file"))
#+end_src
** deft
#+begin_src emacs-lisp
(use-package deft
  :commands (deft)
  :general
  (dcao-leader-def
   "j" #'(lambda () (interactive) (deft) (evil-emacs-state)))

  :config
  (setq deft-extensions '("md" "txt" "org"))
  (setq deft-default-extension "md")
  (setq deft-file-naming-rules
      '((noslash . "-")
        ; (nospace . "-")
        (case-fn . downcase)))
  (setq deft-use-filter-string-for-filename t)
  (setq deft-directory dcao/org-journal))
#+end_src
