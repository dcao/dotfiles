#+TITLE: config.org
#+SUBTITLE: david's emacs config

inspiration: https://github.com/angrybacon/dotemacs

* Bootstrap
** Better defaults
When we're running in GUI mode, we want to disable cursor blinking, the scroll bar, and the toolbar.
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 1))     ; Enable the tooltips
#+END_SRC

#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-window-vscroll nil                          ; Lighten vertical scroll
 confirm-kill-emacs nil                           ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%Y-%M-%d %H:%M"             ; Format the time string
 echo-keystrokes 0.001
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-major-mode 'fundamental-mode
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 scroll-margin 10                                 ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-always-indent 'complete
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 use-dialog-box nil
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 frame-title-format '((:eval (if (buffer-file-name)
                                 (abbreviate-file-name (buffer-file-name))
                               "%b"))))

(setq
 use-package-always-ensure t)

(cd "~/")                                         ; Move to the user directory
(delete-selection-mode 1)                         ; Replace region when inserting text
(display-time-mode 0)                             ; Enable time in the mode-line
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(column-number-mode)                              ; Show col nums in modeline
#+END_SRC
*** Backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
#+END_SRC
** Custom file
#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
** Miscellaneous delights
#+BEGIN_SRC emacs-lisp
(delight '((subword-mode nil t)
           (eldoc-mode nil t)))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :delight
  (undo-tree-mode)
  :init
  (setq
   evil-want-C-u-scroll t
   evil-want-C-i-jump nil)
  (evil-mode)
  (evil-normalize-keymaps))
#+END_SRC
*** Evil Fringe Mark
To show marks in the left fringe of the editor.
#+BEGIN_SRC emacs-lisp
(use-package evil-fringe-mark
  :delight
  :config
  (global-evil-fringe-mark-mode))
#+END_SRC 
** general.el
*** Leader definitions
#+BEGIN_SRC emacs-lisp
(defconst dcao/leader-key "SPC")
(defconst dcao/local-leader-key "SPC m")
#+END_SRC
*** Bind configuration
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-unbind 'normal dcao/leader-key)

    (general-def "<escape>" 'keyboard-escape-quit)
    (general-def "C-w" 'evil-backward-delete)

    (general-define-key
      :prefix dcao/leader-key
      :keymaps 'normal
      ;; unbind SPC and give it a title for which-key (see echo area)
      "" '(nil :which-key "universal leader")
      ;; bind nothing but give SPC f a description for which-key
      "f" '(:ignore t :which-key "file")
      ;; use a cons as a replacement
      "g" '(:ignore t :which-key ("g-key" . "git"))
      "x" '(:ignore t :which-key "meta")
      "b k" 'kill-buffer
      "w q" 'delete-window
      "w /" 'evil-window-vsplit
      "w -" 'evil-window-split
      "w h" 'evil-window-left
      "w j" 'evil-window-down
      "w k" 'evil-window-up
      "w l" 'evil-window-right
      "x r" 'dcao/reload-config)

    (general-define-key
      :keymaps 'normal
      dcao/local-leader-key '(nil :which-key "local leader")))
#+END_SRC
** Meta
*** Config reload
#+BEGIN_SRC emacs-lisp
(defun dcao/reload-config ()
  (interactive)
  (load-file (expand-file-name "init.el" user-emacs-directory)))
#+END_SRC
*** Config compilation
#+BEGIN_SRC emacs-lisp
(defun dcao/compile-config ()
  (interactive)
  (byte-compile-file (expand-file-name "config.el" user-emacs-directory))
  (byte-compile-file (expand-file-name "init.el" user-emacs-directory)))
#+END_SRC
* UI
** Theme
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defun dcao/lisp-dir ()
    (expand-file-name "lisp" user-emacs-directory)))

(setq
 dcao/default-font (font-spec :family "Iosevka" :size 16)
 dcao/variable-font (font-spec :family "Iosevka" :size 14))

(use-package doom-themes)
(use-package doom-gruvbox-theme
  :load-path (lambda () (dcao/lisp-dir))
  :after doom-themes
  :config
  (set-face-attribute 'default nil :font dcao/default-font)
  (set-face-attribute 'variable-pitch nil :font dcao/variable-font))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(use-package hide-mode-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (setq
   doom-modeline-minor-modes t
   doom-modeline-major-mode-icon nil
   doom-modeline-enable-word-count t
   doom-modeline-indent-info t
   doom-modeline-checker-simple-format t))
#+END_SRC
** Misc. settings
#+BEGIN_SRC emacs-lisp
;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(set-frame-parameter nil 'internal-border-width 16)
#+END_SRC
*** Line spacing & linums
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(setq-default
 display-line-numbers-width 4
 line-spacing 4)
#+END_SRC
** Shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :config
  (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.35))))
#+END_SRC
** Centaur Tabs
#+BEGIN_SRC emacs-lisp
(use-package centaur-tabs
  :demand
  :config
  (setq centaur-tabs-style "bar")
  (setq centaur-tabs-set-bar 'over)
  (setq centaur-tabs-set-modified-marker t)
  (setq centaur-tabs-modified-marker "*")
  (centaur-tabs-mode t)
  (centaur-tabs-toggle-groups)
  :general
  (:states 'normal
   "C-<tab>" 'centaur-tabs-forward
   "<C-iso-lefttab>" 'centaur-tabs-forward))

(defun centaur-tabs-buffer-groups ()
  "`centaur-tabs-buffer-groups' control buffers' group rules.

  Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `centaur-tabs-get-group-name' with project name."
  (list
	(cond
	 ((or (string-equal "*" (substring (buffer-name) 0 1))
	      (memq major-mode '(magit-process-mode
				 magit-status-mode
				 magit-diff-mode
				 magit-log-mode
				 magit-file-mode
				 magit-blob-mode
				 magit-blame-mode
				 )))
	  "emacs")
	 ((derived-mode-p 'dired-mode)
	  "dired")
	 ((memq major-mode '(helpful-mode
			     help-mode))
	  "help")
	 ((memq major-mode '(org-mode
			     org-agenda-clockreport-mode
			     org-src-mode
			     org-agenda-mode
			     org-beamer-mode
			     org-indent-mode
			     org-bullets-mode
			     org-cdlatex-mode
			     org-agenda-log-mode
			     diary-mode))
	  "org")
	 (t
	  (buffer-name)))))
#+END_SRC
** Olivetti
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :commands olivetti-mode
  :config
  (setq olivetti-body-width 80))
#+END_SRC
** TODO Eyebrowse
** TODO Persp?
* Features
** Direnv
#+BEGIN_SRC emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :delight which-key-mode
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.5))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(defun +helm|hide-mode-line (&rest _)
  (with-current-buffer (helm-buffer-get)
    (unless helm-mode-line-string
      (hide-mode-line-mode +1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helm
  :after hide-mode-line
  :commands (helm-find-files-1 helm-org-rifle-agenda-files)
  :delight helm-mode
  :preface
  (setq helm-display-header-line nil
        helm-mode-line-string nil
        helm-ff-auto-update-initial-value nil
        helm-find-files-doc-header nil)
  :general
  (general-define-key
    "M-x" 'helm-M-x
    "C-x C-f" 'helm-find-files
    "C-x f" 'helm-recentf
    "C-SPC" 'helm-dabbrev
    "M-y" 'helm-show-kill-ring
    "C-x b" 'helm-buffers-list)
  (general-define-key
    :prefix dcao/leader-key
    :keymaps 'normal
    ":" 'helm-M-x
    "f f" 'helm-find-files
    "f r" 'helm-recentf
    "b b" 'helm-buffers-list)
  (general-define-key
    :keymaps 'helm-map
    "TAB" 'helm-execute-persistent-action
    "C-j" 'helm-select-action)
  :config
  (add-hook 'helm-after-initialize-hook #'+helm|hide-mode-line)
  (advice-add #'helm-display-mode-line :override #'+helm|hide-mode-line)
  (advice-add #'helm-ag-show-status-default-mode-line :override #'ignore) 
  (helm-mode 1)
  (helm-autoresize-mode 1)
  ; get helm to play nice with shackling
  (setq helm-display-function 'pop-to-buffer)
  (setq helm-autoresize-max-height 35))
#+END_SRC
** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :general
  (:prefix dcao/leader-key
   :keymaps 'normal
   "h f" 'helpful-callable
   "h v" 'helpful-variable
   "h k" 'helpful-key))
  (general-define-key
   "C-h f" 'helpful-callable
   "C-h v" 'helpful-variable
   "C-h k" 'helpful-key)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :delight
  :init
  (setq projectile-completion-system 'helm)
  :general
  (:prefix dcao/leader-key
   :keymaps 'normal
   "p" 'projectile-command-map)
  :config
  (projectile-mode +1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :general
  (:prefix dcao/leader-key
   :keymaps 'normal
   "g g" 'magit-status))
#+END_SRC
** Dired
Adding a keybind to show git info:
#+BEGIN_SRC emacs-lisp
(use-package dired-git-info
  :general
  (:keymaps 'dired-mode-map
   ")" 'dired-git-info-mode))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.files/extra/emacs/.emacs.d/snippets"))
  (yas-global-mode 1))
#+END_SRC
** TODO Projectile
* Languages
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :mode "\\.hs\\'")

(use-package dante
  :after haskell-mode
  :commands 'dante-mode
  :init
  ; (add-hook 'haskell-mode-hook 'flycheck-mode)
  (add-hook 'haskell-mode-hook 'dante-mode))
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'")
#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+END_SRC
** Idris
#+BEGIN_SRC emacs-lisp
(use-package idris-mode
  :mode (("\\.idr$" . idris-mode)
         ("\\.ipkg$" . idris-ipkg-mode)
         ("\\.lidr$" . idris-mode)))
#+END_SRC
** Lisp
*** Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (progn
    (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
*** Parinfer
#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :ensure t
  :after evil
  :general
  (:states 'normal
   :prefix dcao/local-leader-key
   "p" 'parinfer-toggle-mode)
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
*** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package sly
  :commands sly
  :general
  (:states 'normal
   :prefix dcao/local-leader-key
   "s" 'sly
   "r r" 'sly-mrepl
   "r n" 'sly-mrepl-new
   "r s" 'sly-mrepl-sync)
  :config
  (use-package sly-macrostep)
  (setq inferior-lisp-program "sbcl"))
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
; (use-package tex-mode
;   :defer t
;   :ensure auctex
;   :config
;   (setq TeX-auto-save t))
#+END_SRC
** Org
*** Basic config
#+BEGIN_SRC emacs-lisp
(defvar dcao/org-root (concat (getenv "HOME") "/default/org/"))
(defvar dcao/org-inbox-template "* TODO %^{Task}
:PROPERTIES:
:CREATED: %U
:END:
%i")

(defvar dcao/org-contact-template "* %^{Name}
:PROPERTIES:
:BIRTHDAY: %^{DOB (yyyy-mm-dd)}
:END:
%i")

(defvar dcao/org-song-rec-template "** %^{Name}
:PROPERTIES:
:CREATED: %U
:END:
%i")

(defvar dcao/org-weekly-review-template "** %(format-time-string \"%Y-%V\")
:PROPERTIES:
:CREATED: %U
:END:
- [ ] Sift inbox
- [ ] Task checkup
  - [ ] Emails?
- [ ] =lt= checkup
- [ ] Self-eval
%?")

(setq org-agenda-files `(,dcao/org-root)
      org-archive-location (concat dcao/org-root "archive/%s::")
      org-log-done 'time
      org-log-into-drawer t
      org-expiry-inactive-timestamps t
      org-default-priority ?C
      org-lowest-priority ?D
      ;; refile
      org-refile-targets '((org-agenda-files :maxlevel . 5))
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm
      ;; contacts
      org-contacts-files `(,(concat dcao/org-root "ppl.org"))
      ;; capture
      org-capture-templates
      `(("t" "inbox todo" entry (file ,(concat dcao/org-root "inbox.org"))
         ,dcao/org-inbox-template)
        ("c" "contact" entry (file ,(concat dcao/org-root "inbox.org"))
         ,dcao/org-contact-template)
        ("s" "song rec" entry (file+headline ,(concat dcao/org-root "lt.org") "Song rec")
         ,dcao/org-song-rec-template)
        ("r" "weekly review" entry (file+headline ,(concat dcao/org-root "review.org") ,(format-time-string "%Y"))
         ,dcao/org-weekly-review-template)))
#+END_SRC
*** Fix newline/indent in src blocks
#+BEGIN_SRC emacs-lisp
(defun dcao/fix-newline-and-indent-in-src-blocks ()
  "Try to mimic `newline-and-indent' with correct indentation in src blocks."
  (when (org-in-src-block-p t)
    (org-babel-do-in-edit-buffer
     (call-interactively #'indent-for-tab-command))))
#+END_SRC
*** Package config
#+BEGIN_SRC emacs-lisp
(defun dcao/org/get-todo-keywords-for (keyword)
  (when keyword
    (cl-loop for (type . keyword-spec) in org-todo-keywords
             for keywords = (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                               (match-string 1 x)
                                             x))
                                    keyword-spec)
             if (eq type 'sequence)
             if (member keyword keywords)
             return keywords)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun dcao/org/refresh-inline-images ()
  "Refresh image previews in the current heading/tree."
  (interactive)
  (if (> (length org-inline-image-overlays) 0)
      (org-remove-inline-images)
    (org-display-inline-images
     t t
     (if (org-before-first-heading-p)
         (line-beginning-position)
       (save-excursion (org-back-to-heading) (point)))
     (if (org-before-first-heading-p)
         (line-end-position)
       (save-excursion (org-end-of-subtree) (point))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun dcao/org/dwim-at-point ()
  "Do-what-I-mean at point.
If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- headline: toggle latex fragments and inline images underneath.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    ;; skip over unimportant contexts
    (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
      (setq context (org-element-property :parent context)
            type (org-element-type context)))
    (pcase type
      ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
       (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
         (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

      (`headline
       (cond ((and (fboundp 'toc-org-insert-toc)
                   (member "TOC" (org-get-tags)))
              (toc-org-insert-toc)
              (message "Updating table of contents"))
             ((org-element-property :todo-type context)
              (org-todo
               (if (eq (org-element-property :todo-type context) 'done)
                   (or (car (dcao/org/get-todo-keywords-for (org-element-property :todo-keyword context)))
                       'todo)
                 'done)))
             ((string= "ARCHIVE" (car-safe (org-get-tags)))
              (org-force-cycle-archived))
             (t
              (dcao/org/refresh-inline-images)
              (org-remove-latex-fragment-image-overlays)
              (org-toggle-latex-fragment '(4)))))

      (`clock (org-clock-update-time-maybe))

      (`footnote-reference
       (org-footnote-goto-definition (org-element-property :label context)))

      (`footnote-definition
       (org-footnote-goto-previous-reference (org-element-property :label context)))

      ((or `planning `timestamp)
       (org-follow-timestamp-link))

      ((or `table `table-row)
       (if (org-at-TBLFM-p)
           (org-table-calc-current-TBLFM)
         (ignore-errors
           (save-excursion
             (goto-char (org-element-property :contents-begin context))
             (org-call-with-arg 'org-table-recalculate (or arg t))))))

      (`table-cell
       (org-table-blank-field)
       (org-table-recalculate)
       (when (and (string-empty-p (string-trim (org-table-get-field)))
                  (bound-and-true-p evil-mode))
         (evil-change-state 'insert)))

      (`babel-call
       (org-babel-lob-execute-maybe))

      (`statistics-cookie
       (save-excursion (org-update-statistics-cookies nil)))

      ((or `src-block `inline-src-block)
       (org-babel-execute-src-block))

      ((or `latex-fragment `latex-environment)
       (org-toggle-latex-fragment))

      (`link
       (let* ((lineage (org-element-lineage context '(link) t))
              (path (org-element-property :path lineage)))
         (if (or (equal (org-element-property :type lineage) "img")
                 (and path (image-type-from-file-name path)))
             (dcao/org/refresh-inline-images)
           (org-open-at-point))))

      (_ (dcao/org/refresh-inline-images)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :delight evil-org-mode
  :hook (org-mode . evil-org-mode)
  :init
  (defvar evil-org-key-theme '(navigation insert textobjects))
  (defvar evil-org-special-o/O '(table-row))
  (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)
  :config
  (add-hook 'org-open-at-point-functions #'evil-set-jump)
  ;; change `evil-org-key-theme' instead
  (advice-add #'evil-org-set-key-theme :override #'ignore))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil

  :general
  (:states 'normal
   :prefix dcao/leader-key
   "o" '(:ignore t :which-key "org")
   "o a" 'org-agenda
   "o c" 'org-capture
   "o f" (lambda () (interactive) (helm-find-files-1 dcao/org-root))
   "o j" 'org-journal-new-entry
   "f o" (lambda () (interactive) (helm-find-files-1 dcao/org-root)))

  (:states 'normal
   :keymaps 'org-mode-map
   [return] 'dcao/org/dwim-at-point
   "RET" 'dcao/org/dwim-at-point)

  (:states 'insert
   :keymaps 'org-mode-map
   [return] 'org-return-indent
   "RET" 'org-return-indent)

  (:states 'normal
   :keymaps 'org-mode-map
   :prefix dcao/local-leader-key
   "a" 'org-archive-subtree
   "e" 'org-expiry-insert-created
   "r" 'org-refile
   "n" 'org-narrow-to-subtree
   "s" 'org-schedule
   "w" 'widen
   "x" 'org-export-dispatch
   "t" 'org-todo
   "m" 'org-time-stamp
   "c" '(:ignore t :which-key "clock")
   "c i" 'org-clock-in
   "c o" 'org-clock-out)

  :config
  (use-package org-contacts :ensure nil)
  (use-package org-habit :ensure nil)
  (add-hook 'org-mode-hook #'org-indent-mode)
  (advice-add #'org-return-indent :after #'dcao/fix-newline-and-indent-in-src-blocks)
  (advice-add 'org-refile :after
        (lambda (&rest _)
        (org-save-all-org-buffers)))
  (add-to-list 'org-modules 'org-habit)
  (setq org-src-fontify-natively t
        org-edit-src-content-indentation 0
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-src-tab-acts-natively t))
#+END_SRC
*** Rifling
#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :after org
  :general
  (:states 'normal
   :prefix dcao/leader-key
   "o r" 'helm-org-rifle-agenda-files)
  :config
  (setq helm-org-rifle-show-path t))
#+END_SRC
*** Journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :after org
  :defer t
  
  :custom
  (org-journal-dir "~/default/org")
  (org-journal-file-type 'yearly)
  (org-journal-date-format "%a, %b %d, %Y")
  (org-journal-file-format "journal-%Y"))
#+END_SRC

Orgzly doesn't have org-journal built-in, so I normally just add a note with the
"journal" title in it instead - I want to automatically refile these notes to
the correct place with a command.

#+BEGIN_SRC emacs-lisp
(defun dcao/org-refile-to-journal ()
  "Refile a subtree to a datetree corresponding to its timestamp.

The current time is used if the entry has no timestamp. If FILE
is nil, refile in the current file."
  (interactive)
  (let* ((datetree-date (or (org-entry-get nil "CREATED" t)
                            (org-read-date t nil "now")))
         (date (org-time-string-to-time datetree-date)))
    (save-excursion
      (with-current-buffer (current-buffer)
        (org-cut-subtree)
        (org-journal-new-entry nil date)
        (org-narrow-to-subtree)
        (show-subtree)
        (org-end-of-subtree t)
        (newline)
        (goto-char (point-max))
        (org-paste-subtree 4)
        (widen)))))
  #+END_SRC
** HTML
#+BEGIN_SRC emacs-lisp
(setq sgml-basic-offset 4)
#+END_SRC
** TODO LSP
* Apps
** calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :commands cfw:open-org-calendar
  :general
  (:states 'normal
   :prefix dcao/leader-key
   "C" 'cfw:open-org-calendar)
  :config
  (use-package calfw-org))
#+END_SRC
