#+TITLE: config.org
#+SUBTITLE: david's emacs config

inspiration: https://github.com/angrybacon/dotemacs

* Bootstrap
** Better defaults
When we're running in GUI mode, we want to disable cursor blinking, the scroll bar, and the toolbar.
#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0) ; Disable the cursor blinking
  (scroll-bar-mode 0)   ; Disable the scroll bar
  (tool-bar-mode 0)     ; Disable the tool bar
  (tooltip-mode 1))     ; Enable the tooltips
#+END_SRC

#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-window-vscroll nil                          ; Lighten vertical scroll
 confirm-kill-emacs nil                           ; Confirm before exiting Emacs
 cursor-in-non-selected-windows t                 ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%Y-%m-%d %H:%M"             ; Format the time string
 echo-keystrokes 0.001
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-major-mode 'fundamental-mode
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 scroll-margin 10                                 ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-always-indent 'complete
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 use-dialog-box nil
 help-at-pt-display-when-idle t
 help-at-pt-timer-delay 0
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 frame-title-format '((:eval (if (buffer-file-name)
                                 (abbreviate-file-name (buffer-file-name))
                               "%b"))))

(help-at-pt-set-timer)

;; Put autosaves in emacs-saves
(setq auto-save-file-name-transforms
  `((".*" "~/.emacs-saves/" t)))
(setq backup-directory-alist '(("." . "~/.emacs-saves")))

(setq max-lisp-eval-depth 5000)
(setq max-specpdl-size 5000)

(setq org-startup-indented t)

(setq mouse-autoselect-window t
      focus-follows-mouse t)

(cd "~/")                                         ; Move to the user directory
(delete-selection-mode 1)                         ; Replace region when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
(column-number-mode)                              ; Show col nums in modeline
#+END_SRC
*** Backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
#+END_SRC
** Custom file
#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
** Miscellaneous delights
#+BEGIN_SRC emacs-lisp
(delight '((subword-mode nil t)
           (eldoc-mode nil t)))
#+END_SRC
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :delight
  (undo-tree-mode)
  :init
  (setq
   evil-want-C-u-scroll t
   evil-want-C-i-jump nil)
  (evil-mode)
  (evil-normalize-keymaps))
#+END_SRC
*** Evil Fringe Mark
To show marks in the left fringe of the editor.
#+BEGIN_SRC emacs-lisp
(use-package evil-fringe-mark
  :delight global-evil-fringe-mark-mode
  :config
  (global-evil-fringe-mark-mode))
#+END_SRC 
*** evil-surround
#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src
** general.el
*** Leader definitions
#+BEGIN_SRC emacs-lisp
(defconst dcao/leader-key "SPC")
(defconst dcao/leader-key-alt "C-SPC")
(defconst dcao/local-leader-key "SPC m")
(defconst dcao/local-leader-key-alt "C-SPC m")
#+END_SRC
*** Bind configuration
#+BEGIN_SRC emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-unbind 'normal dcao/leader-key)
    (general-unbind dcao/leader-key-alt)
    
    (general-create-definer dcao-leader-def
      :prefix dcao/leader-key-alt
      :keymaps 'override)
    (general-create-definer dcao-local-leader-def
      :prefix dcao/local-leader-key-alt
      :keymaps 'override)
      
    (general-def '(normal visual emacs) "SPC" (general-simulate-key "C-SPC"))

    (general-def "<escape>" 'keyboard-escape-quit)
    (general-def "C-w" 'evil-backward-delete)

    (general-def "C-s" 'save-buffer)

    (general-def dcao/leader-key-alt (general-simulate-key dcao/leader-key))

    (dcao-leader-def
      ;; unbind SPC and give it a title for which-key (see echo area)
      "" '(nil :which-key "universal leader")
      ;; bind nothing but give SPC f a description for which-key
      "f" '(:ignore t :which-key "file")
      ;; use a cons as a replacement
      "g" '(:ignore t :which-key ("g-key" . "git"))
      "x" '(:ignore t :which-key "meta")
      "b k" 'kill-buffer
      "b q" 'kill-this-buffer
      "w q" 'delete-window
      "w /" 'evil-window-vsplit
      "w -" 'evil-window-split
      "w h" 'evil-window-left
      "w j" 'evil-window-down
      "w k" 'evil-window-up
      "w l" 'evil-window-right
      "x r" 'dcao/reload-config
      "x q" 'save-buffers-kill-terminal
      "c w" 'count-words
      "c r" 'count-words-region)

    (general-define-key
      :keymaps 'override
      dcao/local-leader-key-alt '(nil :which-key "local leader")))
#+END_SRC
** buffer-move
#+begin_src emacs-lisp
;;; buffer-move.el --- 

;; Copyright (C) 2004-2014  Lucas Bonnet <lucas@rincevent.net.fr>

;; Author: Lucas Bonnet <lucas@rincevent.net>
;; Keywords: lisp,convenience
;; Version: 0.5
;; URL : https://github.com/lukhas/buffer-move

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
;; 02111-1307, USA.

;;; Commentary:

;; This file is for lazy people wanting to swap buffers without
;; typing C-x b on each window. This is useful when you have :

;; +--------------+-------------+
;; |              |             |
;; |    #emacs    |    #gnus    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           .emacs           |
;; |                            |
;; +----------------------------+

;; and you want to have :

;; +--------------+-------------+
;; |              |             |
;; |    #gnus     |   .emacs    |
;; |              |             |
;; +--------------+-------------+
;; |                            |
;; |           #emacs           |
;; |                            |
;; +----------------------------+

;; With buffer-move, just go in #gnus, do buf-move-left, go to #emacs
;; (which now should be on top right) and do buf-move-down.

;; To use it, simply put a (require 'buffer-move) in your ~/.emacs and
;; define some keybindings. For example, i use :

;; (global-set-key (kbd "<C-S-up>")     'buf-move-up)
;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)


;;; Code:


(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))


(provide 'buffer-move)
;;; buffer-move.el ends here
#+end_src
** gcmh
The Garbage Collector Magic Hack delays emacs' GC from collecting until idle.

#+begin_src emacs-lisp
(use-package gcmh
  :delight
  :config
  (gcmh-mode 1))
#+end_src
** Meta
*** Config reload
#+BEGIN_SRC emacs-lisp
(defun dcao/reload-config ()
  (interactive)
  (load-file (expand-file-name "init.el" user-emacs-directory)))
#+END_SRC
*** Config compilation
#+BEGIN_SRC emacs-lisp
(defun dcao/compile-config ()
  (interactive)
  (byte-compile-file (expand-file-name "config.el" user-emacs-directory))
  (byte-compile-file (expand-file-name "init.el" user-emacs-directory)))
#+END_SRC
* exwm
#+begin_src emacs-lisp
(defun dcao/exwm-launch (command)
  (interactive)
  (let ((default-directory (projectile-project-root)))
    (start-process-shell-command command nil command)))
    
(defun dcao/exwm-bind-launch (command)
  (interactive)
  `(lambda () (interactive) (dcao/exwm-launch ,command)))

(defun dcao/exwm-ws-swap-mon (ws &optional switch force)
  (let ((mon (plist-get exwm-randr-workspace-output-plist ws)))
    (when (or force (not (equal exwm-workspace-current-index ws)))
      (if (string= mon "eDP1")
          (progn
            (plist-put exwm-randr-workspace-output-plist ws "HDMI2")
            (exwm-randr-refresh))
      (plist-put exwm-randr-workspace-output-plist ws "eDP1")
      (exwm-randr-refresh))))
  (when (switch)
    (exwm-workspace-switch ws)))
#+end_src

#+begin_src emacs-lisp
(use-package exwm
  :custom
  (exwm-input-prefix-keys '(?\C-\s ?\M-x ?\C-\M-p ?\C-\M-f))
  :config
  (use-package exwm-config :straight nil)
  (use-package exwm-randr :straight nil)

  (setq exwm-randr-workspace-output-plist
        '(0 "eDP1"
          1 "HDMI2"
          2 "HDMI2"
          3 "HDMI2"
          4 "eDP1"
          5 "eDP1"
          6 "eDP1"
          7 "eDP1"
          8 "eDP1"
          9 "eDP1"))
  (add-hook 'exwm-randr-screen-change-hook
            (lambda ()
              (start-process-shell-command
               "xrandr" nil "xrandr --output HDMI2 --right-of eDP1 --auto")))
  (exwm-randr-enable)

  (setq
   exwm-workspace-number 9
   exwm-workspace-show-all-buffers t
   exwm-layout-show-all-buffers t)

  (display-time-mode t)
  (display-battery-mode t)
  
  (use-package desktop-environment
    
    :config
    (setq desktop-environment-brightness-get-command "light")
    (setq desktop-environment-brightness-set-command "light %s")
    (setq desktop-environment-brightness-get-regexp "^\\([0-9]+\\)")
    (setq desktop-environment-brightness-normal-increment "-A 5")
    (setq desktop-environment-brightness-normal-decrement "-U 5")
    (setq desktop-environment-brightness-small-increment "-A 5")
    (setq desktop-environment-brightness-small-decrement "-U 5")
    
    (exwm-input-set-key (kbd "<XF86AudioMute>") #'desktop-environment-toggle-mute)
    (exwm-input-set-key (kbd "<XF86AudioMicMute>") #'desktop-environment-toggle-microphone-mute)
    (exwm-input-set-key (kbd "<XF86AudioRaiseVolume>") #'desktop-environment-volume-increment)
    (exwm-input-set-key (kbd "<XF86AudioLowerVolume>") #'desktop-environment-volume-decrement)
    (exwm-input-set-key (kbd "<XF86MonBrightnessUp>") #'desktop-environment-brightness-increment)
    (exwm-input-set-key (kbd "<XF86MonBrightnessDown>") #'desktop-environment-brightness-decrement)
    (exwm-input-set-key (kbd "<XF86Bluetooth>") #'desktop-environment-toggle-bluetooth)

    (require 'cl)
    (dolist (k '(XF86AudioMute
                 XF86AudioMicMute
                 XF86AudioRaiseVolume
                 XF86AudioLowerVolume
                 XF86MonBrightnessUp
                 XF86MonBrightnessDown
                 XF86Bluetooth))
      (pushnew k exwm-input-prefix-keys)))

  (add-hook 'exwm-update-class-hook
            (lambda ()
              (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                          (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-class-name))))
              
  (add-hook 'exwm-update-title-hook
            (lambda ()
              (when (or (not exwm-instance-name)
                        (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-title))))

  (exwm-input-set-key (kbd "<s-tab>") #'helm-run-external-command)
  (exwm-input-set-key (kbd "s-h") #'evil-window-left)
  (exwm-input-set-key (kbd "s-j") #'evil-window-down)
  (exwm-input-set-key (kbd "s-k") #'evil-window-up)
  (exwm-input-set-key (kbd "s-l") #'evil-window-right)
  (exwm-input-set-key (kbd "s-w") #'kill-this-buffer)
  (exwm-input-set-key (kbd "s-q") #'delete-window)

  (exwm-input-set-key (kbd "s-C-h") #'shrink-window-horizontally)
  (exwm-input-set-key (kbd "s-C-l") #'enlarge-window-horizontally)
  (exwm-input-set-key (kbd "s-C-j") #'shrink-window)
  (exwm-input-set-key (kbd "s-C-k") #'enlarge-window)
  
  (exwm-input-set-key (kbd "s-K") #'buf-move-up)
  (exwm-input-set-key (kbd "s-J") #'buf-move-down)
  (exwm-input-set-key (kbd "s-H") #'buf-move-left)
  (exwm-input-set-key (kbd "s-L") #'buf-move-right)

  (dolist (k '(?\s-H
               ?\s-J
               ?\s-K
               ?\C-\s
               ?\s-L))
    (pushnew k exwm-input-prefix-keys))
  
  (exwm-input-set-key (kbd "<s-return>")
                      (lambda () (interactive) (start-process-shell-command "st" nil "st")))

  (exwm-input-set-key (kbd "C-M-p")
                      (lambda () (interactive) (start-process-shell-command "rofi-pass" nil "rofi-pass")))
  (exwm-input-set-key (kbd "C-M-f")
                      (lambda () (interactive) (start-process-shell-command "flameshot" nil "flameshot gui")))

  (exwm-input-set-key (kbd "s-1")
                      (lambda () (interactive) (exwm-workspace-switch 0)))
  (exwm-input-set-key (kbd "s-2")
                      (lambda () (interactive) (exwm-workspace-switch 1)))
  (exwm-input-set-key (kbd "s-3")
                      (lambda () (interactive) (exwm-workspace-switch 2)))
  (exwm-input-set-key (kbd "s-4")
                      (lambda () (interactive) (exwm-workspace-switch 3)))
  (exwm-input-set-key (kbd "s-5")
                      (lambda () (interactive) (exwm-workspace-switch 4)))
  (exwm-input-set-key (kbd "s-6")
                      (lambda () (interactive) (exwm-workspace-switch 5)))
  (exwm-input-set-key (kbd "s-7")
                      (lambda () (interactive) (exwm-workspace-switch 6)))
  (exwm-input-set-key (kbd "s-8")
                      (lambda () (interactive) (exwm-workspace-switch 7)))
  (exwm-input-set-key (kbd "s-9")
                      (lambda () (interactive) (exwm-workspace-switch 8)))
  (exwm-input-set-key (kbd "s-0")
                      (lambda () (interactive) (exwm-workspace-switch 9)))
                      
  (exwm-input-set-key (kbd "s-!")
                      (lambda () (interactive) (exwm-workspace-move-window 0)))
  (exwm-input-set-key (kbd "s-@")
                      (lambda () (interactive) (exwm-workspace-move-window 1)))
  (exwm-input-set-key (kbd "s-#")
                      (lambda () (interactive) (exwm-workspace-move-window 2)))
  (exwm-input-set-key (kbd "s-$")
                      (lambda () (interactive) (exwm-workspace-move-window 3)))
  (exwm-input-set-key (kbd "s-%")
                      (lambda () (interactive) (exwm-workspace-move-window 4)))
  (exwm-input-set-key (kbd "s-^")
                      (lambda () (interactive) (exwm-workspace-move-window 5)))
  (exwm-input-set-key (kbd "s-&")
                      (lambda () (interactive) (exwm-workspace-move-window 6)))
  (exwm-input-set-key (kbd "s-*")
                      (lambda () (interactive) (exwm-workspace-move-window 7)))
  (exwm-input-set-key (kbd "s-(")
                      (lambda () (interactive) (exwm-workspace-move-window 8)))
  (exwm-input-set-key (kbd "s-)")
                      (lambda () (interactive) (exwm-workspace-move-window 9)))
  
  
  
  (dolist (k '(?\C-\s-!
               ?\C-\s-@
               ?\C-\s-#
               ?\C-\s-$
               ?\C-\s-%
               ?\C-\s-^
               ?\C-\s-&
               ?\C-\s-*
               ?\C-\s-\(
               ?\C-\s-\)))
    (pushnew k exwm-input-prefix-keys))
  
  (exwm-input-set-key (kbd "s-C-!")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 0)))
  (exwm-input-set-key (kbd "s-C-@")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 1)))
  (exwm-input-set-key (kbd "s-C-#")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 2)))
  (exwm-input-set-key (kbd "s-C-$")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 3)))
  (exwm-input-set-key (kbd "s-C-%")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 4)))
  (exwm-input-set-key (kbd "s-C-^")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 5)))
  (exwm-input-set-key (kbd "s-C-&")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 6)))
  (exwm-input-set-key (kbd "s-C-*")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 7)))
  (exwm-input-set-key (kbd "s-C-(")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 8)))
  (exwm-input-set-key (kbd "s-C-)")
                      (lambda () (interactive) (dcao/exwm-ws-swap-mon 9)))

  (require 'exwm-systemtray)
  (exwm-systemtray-enable)

  (exwm-enable))
#+end_src
* UI
** Theme
#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (defun dcao/lisp-dir ()
    (expand-file-name "lisp" user-emacs-directory)))

(setq
 dcao/default-font (font-spec :family "Iosevka" :size 16)
 dcao/variable-font (font-spec :family "Iosevka" :size 14))

(use-package doom-themes
  :config
  (load-theme 'doom-gruvbox t)
  (doom-themes-org-config))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(use-package hide-mode-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  (doom-modeline-mode 1)
  :config
  (setq
   doom-modeline-minor-modes t
   doom-modeline-major-mode-icon nil
   doom-modeline-enable-word-count nil
   doom-modeline-indent-info t
   doom-modeline-checker-simple-format t))

;; To fix the right side of the modeline getting cut off (see doom emacs readme)
(setq all-the-icons-scale-factor 1)
#+END_SRC
** Misc. settings
#+BEGIN_SRC emacs-lisp
;; more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
                   (abbreviate-file-name (buffer-file-name))
                 "%b"))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(set-frame-parameter nil 'internal-border-width 0)
#+END_SRC
*** Line spacing & linums
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(setq-default
 display-line-numbers-width 4
 line-spacing 4)
#+END_SRC
** Shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :config
  (setq shackle-default-alignment 'below
        shackle-default-size 0.35
        shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.35)))
  (shackle-mode t))
#+END_SRC
** Centaur Tabs
#+BEGIN_SRC emacs-lisp
; (use-package centaur-tabs
;   :demand
;   :config
;   (setq centaur-tabs-style "bar")
;   (setq centaur-tabs-set-bar 'over)
;   (setq centaur-tabs-set-modified-marker t)
;   (setq centaur-tabs-modified-marker "*")
;   (centaur-tabs-mode t)
;   (centaur-tabs-toggle-groups)
;   :general
;   (:states 'normal
;    "C-<tab>" 'centaur-tabs-forward
;    "<C-iso-lefttab>" 'centaur-tabs-forward))
; 
; (defun centaur-tabs-buffer-groups ()
;   "`centaur-tabs-buffer-groups' control buffers' group rules.
; 
;   Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
;   All buffer name start with * will group to \"Emacs\".
;   Other buffer group by `centaur-tabs-get-group-name' with project name."
;   (list
; 	(cond
; 	 ((or (string-equal "*" (substring (buffer-name) 0 1))
; 	      (memq major-mode '(magit-process-mode
; 				 magit-status-mode
; 				 magit-diff-mode
; 				 magit-log-mode
; 				 magit-file-mode
; 				 magit-blob-mode
; 				 magit-blame-mode
; 				 )))
; 	  "emacs")
; 	 ((derived-mode-p 'dired-mode)
; 	  "dired")
; 	 ((memq major-mode '(helpful-mode
; 			     help-mode))
; 	  "help")
; 	 ((memq major-mode '(org-mode
; 			     org-agenda-clockreport-mode
; 			     org-src-mode
; 			     org-agenda-mode
; 			     org-beamer-mode
; 			     org-indent-mode
; 			     org-bullets-mode
; 			     org-cdlatex-mode
; 			     org-agenda-log-mode
; 			     diary-mode))
; 	  "org")
; 	 (t
; 	  (buffer-name)))))
#+END_SRC
** Olivetti
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :commands olivetti-mode
  :config
  (setq olivetti-body-width 80))
#+END_SRC
** TODO Eyebrowse
** TODO Persp?
* Features
** Direnv
#+BEGIN_SRC emacs-lisp
(use-package direnv
 :config
 (direnv-mode))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :delight which-key-mode
  :init
  (which-key-mode)
  :config
  (setq which-key-idle-delay 0.5))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
(defun +helm|hide-mode-line (&rest _)
  (with-current-buffer (helm-buffer-get)
    (unless helm-mode-line-string
      (hide-mode-line-mode +1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helm
  :commands (helm-find-files-1 helm-run-external-command)
  :delight helm-mode
  :preface
  (setq helm-display-header-line nil
        helm-mode-line-string nil
        helm-ff-auto-update-initial-value nil
        helm-find-files-doc-header nil)
  :general
  (general-define-key
    "M-x" 'helm-M-x
    "C-x C-f" 'helm-find-files
    "C-x f" 'helm-recentf
    "C-SPC" 'helm-dabbrev
    "M-y" 'helm-show-kill-ring
    "C-x b" 'helm-buffers-list)
  (dcao-leader-def
    ":" 'helm-M-x
    "f f" 'helm-find-files
    "f r" 'helm-recentf
    "b b" 'helm-buffers-list)
  (general-define-key
    :keymaps 'helm-map
    "TAB" 'helm-execute-persistent-action
    "C-j" 'helm-select-action)
  :config
  (add-hook 'helm-after-initialize-hook #'+helm|hide-mode-line)
  (advice-add #'helm-display-mode-line :override #'+helm|hide-mode-line)
  (advice-add #'helm-ag-show-status-default-mode-line :override #'ignore) 
  (helm-mode 1)
  (helm-autoresize-mode 1)
  ; get helm to play nice with shackling
  (setq helm-display-function 'pop-to-buffer)
  (setq helm-autoresize-max-height 35))
#+END_SRC
*** helm-rg
#+begin_src emacs-lisp
(use-package helm-rg
  :general
  (dcao-leader-def
    "o s" (lambda () (interactive) (helm-rg "" nil (list dcao/org-root)))
    "p s r" (lambda () (interactive) (helm-rg "" nil (list (projectile-project-root))))))
#+end_src
** Company
#+begin_src emacs-lisp
(use-package company
  :hook (org-roam-mode . company-mode))
#+end_src
** Helpful
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :general
  (dcao-leader-def
   "h f" 'helpful-callable
   "h v" 'helpful-variable
   "h k" 'helpful-key))
   
  (general-define-key
   "C-h f" 'helpful-callable
   "C-h v" 'helpful-variable
   "C-h k" 'helpful-key)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :delight
  :init
  (setq projectile-completion-system 'helm)
  :general
  (dcao-leader-def
   "p" '(:keymap projectile-command-map :which-ley "projectile"))
  :config
  (projectile-mode +1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :general
  (dcao-leader-def
   "g g" 'magit-status))
#+END_SRC
** Dired
Adding a keybind to show git info:
#+BEGIN_SRC emacs-lisp
(use-package dired-git-info
  :general
  (:keymaps 'dired-mode-map
   ")" 'dired-git-info-mode))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :general
  (dcao-leader-def
   "s" '(:ignore t :which-key "snippets")
   "s n" 'yas-new-snippet
   "s e" 'yas-visit-snippet-file
   "s c" 'insert-char)
  :init
  (yas-global-mode 1)
  :config
  (setq yas-snippet-dirs '("~/.files/extra/emacs/.emacs.d/snippets"))
  (yas-reload-all))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC
* Languages
** Haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :hook ((haskell-mode . direnv-update-environment))
  :mode "\\.hs\\'")

; (use-package dante
;   :commands 'dante-mode
;   :hook ((haskell-mode-hook . dante-mode))
;   :config
;   (setq dante-debug '(inputs outputs responses command-line))
;   (setq dante-methods '(stack new-impure-nix new-build bare-ghci)))

; (use-package lsp-haskell
;   :hook ((haskell-mode-hook . lsp-mode))
;   :init
;   (setq lsp-haskell-process-wrapper-function
;     (lambda (argv)
;       (append
;         (append (list "nix-shell" "-I" "." "--command" )
;                 (list (mapconcat 'identity argv " ")))
;         (list (concat (lsp-haskell--get-root) "/shell.nix"))))))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'")
#+END_SRC
** Lua
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'"
  :interpreter "lua")
#+END_SRC
** Idris
#+BEGIN_SRC emacs-lisp
(use-package idris-mode
  :mode (("\\.idr$" . idris-mode)
         ("\\.ipkg$" . idris-ipkg-mode)
         ("\\.lidr$" . idris-mode)))
#+END_SRC
** Nix
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
#+end_src
** Lisp
*** Rainbow Delimeters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
  (progn
    (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'lisp-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
*** Parinfer
#+BEGIN_SRC emacs-lisp
(use-package parinfer
  :after evil
  :general
  (dcao-local-leader-def
   :keymaps 'parinfer-mode-map
   "p" 'parinfer-toggle-mode)
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
*** Common Lisp
#+BEGIN_SRC emacs-lisp
(use-package sly
  :commands sly
  :general
  (dcao-local-leader-def
   :keymap 'sly-mode-map
   "s" 'sly
   "r r" 'sly-mrepl
   "r n" 'sly-mrepl-new
   "r s" 'sly-mrepl-sync)
  :config
  (use-package sly-macrostep)
  (setq inferior-lisp-program "sbcl"))
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
; (use-package tex-mode
;   :defer t
;   :config
;   (setq TeX-auto-save t))
#+END_SRC
** Org
*** Basic config
#+BEGIN_SRC emacs-lisp
(defvar dcao/org-root (concat (getenv "HOME") "/default/org/"))
(defvar dcao/org-inbox-template "* TODO %^{Task}
:PROPERTIES:
:CREATED: %U
:END:
%i")

(defvar dcao/org-brain-template "* %^{title}
:PROPERTIES:
:CREATED: %U
:END:
%i")

(defvar dcao/org-contact-template "* %^{Name}
:PROPERTIES:
:BIRTHDAY: %^{DOB (yyyy-mm-dd)}
:END:
%i")

(defvar dcao/org-song-rec-template "** %^{Name}
:PROPERTIES:
:CREATED: %U
:END:
%i")

(defvar dcao/org-weekly-review-template "** %(format-time-string \"%Y-%V\")
:PROPERTIES:
:CREATED: %U
:END:
- [ ] Sift inbox
- [ ] Task checkup
  - [ ] Emails?
- [ ] =lt= checkup
- [ ] Self-eval
%?")

(setq org-directory dcao/org-root
      org-agenda-files `(,dcao/org-root)
      org-archive-location (concat dcao/org-root "archive/%s::")
      org-agenda-span 7
      org-agenda-start-on-weekday nil
      org-log-done 'time
      org-log-into-drawer t
      org-expiry-inactive-timestamps t
      org-default-priority ?C
      org-lowest-priority ?D
      org-startup-folded 'overview
      org-preview-latex-default-process 'imagemagick ; faster
      ;; refile
      org-refile-targets '((org-agenda-files :maxlevel . 5))
      org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm
      ;; contacts
      org-contacts-files `(,(concat dcao/org-root "ppl.org"))
      ;; capture
      org-capture-templates
      `(("t" "inbox todo" entry (file ,(concat dcao/org-root "inbox.org"))
         ,dcao/org-inbox-template)
        ("b" "brain entry" entry (file ,(concat dcao/org-root "brain/index.org"))
         ,dcao/org-brain-template)
        ("c" "contact" entry (file ,(concat dcao/org-root "inbox.org"))
         ,dcao/org-contact-template)
        ("s" "song rec" entry (file+headline ,(concat dcao/org-root "lt.org") "Song rec")
         ,dcao/org-song-rec-template)
        ("r" "weekly review" entry (file+headline ,(concat dcao/org-root "review.org") ,(format-time-string "%Y"))
         ,dcao/org-weekly-review-template)))
#+END_SRC
**** Agenda modifications
I want to have a line above every day in the agenda. This does that:
#+BEGIN_SRC emacs-lisp
(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))
#+END_SRC
*** Fix newline/indent in src blocks
#+BEGIN_SRC emacs-lisp
(defun dcao/fix-newline-and-indent-in-src-blocks ()
  "Try to mimic `newline-and-indent' with correct indentation in src blocks."
  (when (org-in-src-block-p t)
    (org-babel-do-in-edit-buffer
     (call-interactively #'indent-for-tab-command))))
#+END_SRC
*** Package config
#+BEGIN_SRC emacs-lisp
(defun dcao/org/get-todo-keywords-for (keyword)
  (when keyword
    (cl-loop for (type . keyword-spec) in org-todo-keywords
             for keywords = (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                               (match-string 1 x)
                                             x))
                                    keyword-spec)
             if (eq type 'sequence)
             if (member keyword keywords)
             return keywords)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(defun dcao/org/refresh-inline-images ()
  "Refresh image previews in the current heading/tree."
  (interactive)
  
  (if (> (length org-inline-image-overlays) 0)
      (org-remove-inline-images)
    (org-display-inline-images
     t t
     (if (org-before-first-heading-p)
         (line-beginning-position)
       (save-excursion (org-back-to-heading) (point)))
     (if (org-before-first-heading-p)
         (line-end-position)
       (save-excursion (org-end-of-subtree) (point))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun dcao/org/dwim-at-point ()
  "Do-what-I-mean at point.
If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- headline: toggle latex fragments and inline images underneath.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree."
  (interactive)
  (let* ((context (org-element-context))
         (type (org-element-type context)))
    ;; skip over unimportant contexts
    (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
      (setq context (org-element-property :parent context)
            type (org-element-type context)))
    (pcase type
      ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
       (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
         (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

      (`headline
       (cond ((and (fboundp 'toc-org-insert-toc)
                   (member "TOC" (org-get-tags)))
              (toc-org-insert-toc)
              (message "Updating table of contents"))
             ((org-element-property :todo-type context)
              (org-todo
               (if (eq (org-element-property :todo-type context) 'done)
                   (or (car (dcao/org/get-todo-keywords-for (org-element-property :todo-keyword context)))
                       'todo)
                 'done)))
             ((string= "ARCHIVE" (car-safe (org-get-tags)))
              (org-force-cycle-archived))
             (t
              (dcao/org/refresh-inline-images)
              (org-remove-latex-fragment-image-overlays)
              (org-toggle-latex-fragment '(4)))))

      (`clock (org-clock-update-time-maybe))

      (`footnote-reference
       (org-footnote-goto-definition (org-element-property :label context)))

      (`footnote-definition
       (org-footnote-goto-previous-reference (org-element-property :label context)))

      ((or `planning `timestamp)
       (org-follow-timestamp-link))

      ((or `table `table-row)
       (if (org-at-TBLFM-p)
           (org-table-calc-current-TBLFM)
         (ignore-errors
           (save-excursion
             (goto-char (org-element-property :contents-begin context))
             (org-call-with-arg 'org-table-recalculate (or arg t))))))

      (`table-cell
       (org-table-blank-field)
       (org-table-recalculate)
       (when (and (string-empty-p (string-trim (org-table-get-field)))
                  (bound-and-true-p evil-mode))
         (evil-change-state 'insert)))

      (`babel-call
       (org-babel-lob-execute-maybe))

      (`statistics-cookie
       (save-excursion (org-update-statistics-cookies nil)))

      ((or `src-block `inline-src-block)
       (org-babel-execute-src-block))

      ((or `latex-fragment `latex-environment)
       (org-toggle-latex-fragment))

      (`link
       (let* ((lineage (org-element-lineage context '(link) t))
              (path (org-element-property :path lineage)))
         (if (or (equal (org-element-property :type lineage) "img")
                 (and path (image-type-from-file-name path)))
             (dcao/org/refresh-inline-images)
           (org-open-at-point))))

      (_ (dcao/org/refresh-inline-images)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :delight evil-org-mode
  :hook (org-mode . evil-org-mode)
  :init
  (defvar evil-org-key-theme '(navigation insert textobjects))
  (defvar evil-org-special-o/O '(table-row))
  (add-hook 'evil-org-mode-hook #'evil-normalize-keymaps)
  :config
  (add-hook 'org-open-at-point-functions #'evil-set-jump)
  ;; change `evil-org-key-theme' instead
  (advice-add #'evil-org-set-key-theme :override #'ignore))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'subr-x)
(straight-use-package 'git)

(defun org-git-version ()
  "The Git version of org-mode.
Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))

(defun org-release ()
  "The release version of org-mode.
Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))

(provide 'org-version)

(setq org-src-fontify-natively t
        org-edit-src-content-indentation 0
        org-src-window-setup 'current-window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t
        org-agenda-window-setup 'reorganize-frame
        org-agenda-restore-windows-after-quit t
        org-src-tab-acts-natively t)

(use-package org-plus-contrib
  :general
  (dcao-leader-def
   "o" '(:ignore t :which-key "org")
   "a" 'org-agenda
   "o c" 'org-capture
   "o f" (lambda () (interactive) (helm-find-files-1 dcao/org-root))
   "o j" 'org-journal-new-entry
   "f o" (lambda () (interactive) (helm-find-files-1 dcao/org-root)))
  (:states 'normal
   :keymaps 'org-mode-map
   [return] 'dcao/org/dwim-at-point
   "RET" 'dcao/org/dwim-at-point)
  (:states 'insert
   :keymaps 'org-mode-map
   [return] 'org-return-indent
   "RET" 'org-return-indent)
  (dcao-local-leader-def
   :keymaps 'org-mode-map
   "a" 'org-archive-subtree
   "e" 'org-expiry-insert-created
   "r" 'org-refile
   "n" 'org-narrow-to-subtree
   "s" 'org-schedule
   "w" 'widen
   "x" 'org-export-dispatch
   "t" 'org-todo
   "m" 'org-time-stamp
   "i" 'org-insert-link
   "p" 'org-set-property
   "c" '(:ignore t :which-key "clock")
   "c i" 'org-clock-in
   "c o" 'org-clock-out)

  :config
  (modify-syntax-entry ?< ".")
  (modify-syntax-entry ?> ".")
  (advice-add #'org-return-indent :after #'dcao/fix-newline-and-indent-in-src-blocks)
  (advice-add 'org-refile :after
        (lambda (&rest _)
        (org-save-all-org-buffers)))
  (add-to-list 'org-modules 'org-habit))
        
(require 'org-contacts)
(require 'org-habit)
(require 'org-expiry)
#+END_SRC
*** Rifling
#+BEGIN_SRC emacs-lisp
;; (use-package helm-org-rifle
;;   :after org
;;   :general
;;   (dcao-leader-def
;;    "o r" 'helm-org-rifle-agenda-files)
;;   :config
;;   (setq helm-org-rifle-show-path t))
#+END_SRC
*** Journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :after org
  :defer t
  
  :custom
  (org-journal-dir "~/default/org")
  (org-journal-file-type 'yearly)
  (org-journal-date-format "%a, %b %d, %Y")
  (org-journal-file-format "journal-%Y"))
#+END_SRC

Orgzly doesn't have org-journal built-in, so I normally just add a note with the
"journal" title in it instead - I want to automatically refile these notes to
the correct place with a command.

#+BEGIN_SRC emacs-lisp
(defun dcao/org-refile-to-journal ()
  "Refile a subtree to a datetree corresponding to its timestamp.

The current time is used if the entry has no timestamp. If FILE
is nil, refile in the current file."
  (interactive)
  (let* ((datetree-date (or (org-entry-get nil "CREATED" t)
                            (org-read-date t nil "now")))
         (date (org-time-string-to-time datetree-date)))
    (save-excursion
      (with-current-buffer (current-buffer)
        (org-cut-subtree)
        (org-journal-new-entry nil date)
        (org-narrow-to-subtree)
        (show-subtree)
        (org-end-of-subtree t)
        (newline)
        (goto-char (point-max))
        (org-paste-subtree 4)
        (widen)))))
  #+END_SRC
*** Fixing stupid angle brackets in source blocks
Angle brackets are highlighted as mismatched brackets, but it's just comparisons!!
#+BEGIN_SRC emacs-lisp
(defun org-mode-<>-syntax-fix (start end)
  "Change syntax of characters ?< and ?> to symbol within source code blocks."
  (let ((case-fold-search t))
    (when (eq major-mode 'org-mode)
      (save-excursion
        (goto-char start)
        (while (re-search-forward "<\\|>" end t)
          (when (save-excursion
                  (and
                   (re-search-backward "[[:space:]]*#\\+\\(begin\\|end\\)_src\\_>" nil t)
                   (compare-strings (match-string 1) nil nil "begin" nil nil t)))
            ;; This is a < or > in an org-src block
            (put-text-property (point) (1- (point))
                               'syntax-table (string-to-syntax "_"))))))))

(defun org-setup-<>-syntax-fix ()
  "Setup for characters ?< and ?> in source code blocks.
Add this function to `org-mode-hook'."
  (setq syntax-propertize-function 'org-mode-<>-syntax-fix)
  (syntax-propertize (point-max)))

; doesn't work for now?
; (add-hook 'org-mode-hook #'org-setup-<>-syntax-fix)
#+END_SRC
*** org-timeline
This is the code for org-timeline from https://github.com/deopurkar/org-timeline.

We're copy-pasting to use the fork of org-timeline with more stuff. We also make
some of our own changes:
- Include todos with deadline ranges.
- Fix bug with tasks that cross the date threshold (12am) - they're no longer offset
- Fix bug with tasks that cross the date and line threshold - it no longer crashes
- If an item is DONE, it can't be conflicted with
#+BEGIN_SRC emacs-lisp
;;; org-timeline.el --- Add graphical view of agenda to agenda buffer. -*- lexical-binding: t -*-

;; Copyright (C) 2017 Matúš Goljer

;; Author: Matúš Goljer <matus.goljer@gmail.com>
;; Maintainer: Matúš Goljer <matus.goljer@gmail.com>
;; Version: 0.3.0
;; Created: 16th April 2017
;; Package-requires: ((dash "2.13.0") (emacs "24.3"))
;; Keywords: calendar
;; URL: https://github.com/Fuco1/org-timeline/

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 3
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Add graphical view of agenda to agenda buffer.

;; This package adds a graphical view of the agenda after the last
;; agenda line.  By default the display starts at 5 AM today and
;; goes up to 4 AM next day (this covers 24 hours).

;; Scheduled tasks or tasks with time ranges are rendered in the
;; display with `org-timeline-block' face.  Clocked entires are
;; displayed in `org-timeline-clocked' face.  The background of
;; timeslots which are in the past is highlighted with
;; `org-timeline-elapsed' face.

;; You can use custom color for a task by adding the property
;; `TIMELINE_FACE' with either a string which is a color name or a
;; list which specifies the face properties or a symbol which is
;; taken to be a face name.

;;; Code:

(require 'dash)

(require 'org-agenda)

(defgroup org-timeline ()
  "Graphical view of agenda in agenda buffer."
  :group 'org
  :prefix "org-timeline-")

(defgroup org-timeline-faces ()
  "Faces for org-timeline."
  :group 'org-timeline)

(defface org-timeline-block
  '((t (:background "CadetBlue")))
  "Face used for printing blocks with time range information.

These are blocks that are scheduled for specific time range or
have an active timestamp with a range."
  :group 'org-timeline-faces)

(defface org-timeline-conflict
  '((t (:background "OrangeRed")))
  "Face used for printing conflicting blocks with time range information."
  :group 'org-timeline-faces)

(defface org-timeline-elapsed
  '((t (:inherit default)))
  "Face used for highlighting elapsed portion of the day."
  :group 'org-timeline-faces)

(defface org-timeline-clocked
  '((t (:background "DarkOliveGreen")))
  "Face used for printing clocked blocks.

Clocked blocks appear in the agenda when `org-agenda-log-mode' is
activated."
  :group 'org-timeline-faces)

(defcustom org-timeline-default-duration
  nil
  "Default event duration for org-timeline")

(defmacro org-timeline-with-each-line (&rest body)
  "Execute BODY on each line in buffer."
  (declare (indent 0)
           (debug (body)))
  `(save-excursion
     (goto-char (point-min))
     ,@body
     (while (= (forward-line) 0)
       ,@body)))

(defun org-timeline--get-face ()
  "Get the face with which to draw the current block."
  (--if-let (org-entry-get (org-get-at-bol 'org-marker) "TIMELINE_FACE" t)
      (let ((read-face (car (read-from-string it))))
        (if (stringp read-face)
            (list :background read-face)
          read-face))
    (cond
     ((save-excursion
        (search-forward "Clocked:" (line-end-position) t))
      'org-timeline-clocked)
     ((face-at-point)
      `((:background ,(face-attribute (face-at-point) ':foreground nil 'default))))
     (t 'org-timeline-block))))

(defun org-timeline--add-elapsed-face (string current-offset)
  "Add `org-timeline-elapsed' to STRING's elapsed portion.

Return new copy of STRING."
  (let ((string-copy (copy-sequence string)))
    (when (< 0 current-offset)
      (put-text-property 0 current-offset 'font-lock-face 'org-timeline-elapsed string-copy))
    string-copy))

(defun org-timeline--generate-timeline ()
  "Generate the timeline string that will represent current agenda view."
  (let* ((start-offset 260) ; offset of calendar. a start offset of 60 sets the beginning to 00:00. Each increment of 10 corresponds to an extra 15 minutes.
         (current-time (+ (* 60 (string-to-number (format-time-string "%H")))
                          (string-to-number (format-time-string "%M"))))
         (current-offset (/ (- current-time start-offset) 10))
         (slotline (org-timeline--add-elapsed-face
                    "|     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |"
                    current-offset))
         (hourline (org-timeline--add-elapsed-face
                    "   |05:00|06:00|07:00|08:00|09:00|10:00|11:00|12:00|13:00|14:00|15:00|16:00|17:00|18:00|19:00|20:00|21:00|22:00|23:00|00:00|01:00|02:00|03:00|04:00|"
                    current-offset))
         (tasks nil))
    (org-timeline-with-each-line
      (-when-let* ((time-of-day (org-get-at-bol 'time-of-day))
                   (marker (org-get-at-bol 'org-marker))
                   (type (org-get-at-bol 'type))
                   (name (org-get-at-bol 'txt)))
        (when (member type (list "scheduled" "clock" "deadline" "timestamp"))
          (let ((duration (or (org-get-at-bol 'duration)
                              org-timeline-default-duration
                              0))
                (is-done (eql (org-get-at-bol 'face) (org-get-at-bol 'done-face))))
            (when (and (numberp duration)            
                       (< duration 0))            ;; This is events at midnight
              (cl-incf duration 1440))

            (let* ((hour (/ time-of-day 100))     ;; time-of-day is in HHMM notation
                   (minute (mod time-of-day 100))
                   (day-of-month (if (string= type "deadline") (org-get-at-bol 'date) (calendar-absolute-from-gregorian (org-get-at-bol 'date))))
                   (beg (+ (* day-of-month 1440) (* hour 60) minute))
                   (end (round (+ beg duration)))
                   (face (org-timeline--get-face)))
              (push (list beg end face name is-done) tasks))))))

    (setq tasks (nreverse tasks))
    (cl-labels ((get-start-pos (current-line beg) (+ 1 (* current-line (1+ (length hourline))) (/ (- beg start-offset) 10)))
                (get-end-pos (current-line end) (+ 1 (* current-line (1+ (length hourline))) (/ (- end start-offset) 10))))
      (let ((current-line 1)
            (current-line-offset 0)
            (current-day nil))
        (with-temp-buffer
          (insert hourline)
          (-each tasks
            (-lambda ((beg end face name is-done))
              (let* ((spans-multi-days (not (eq (/ beg 1440) (/ end 1440))))
                     (offset-to-mins (/ (* 3 (- start-offset 60)) 2))
                     (next-line-from-beg (+ beg offset-to-mins (- (if (<= (% beg 1440) offset-to-mins) 0 1440) (% beg 1440))))
                     (spans-multi-lines (>= end next-line-from-beg))
                     (new-current-day (/ beg 1440))
                     (beg-in-day (% beg 1440))
                     (end-in-day (if spans-multi-days (+ 1440 (% end 1440)) (% end 1440))))
                (when (not current-day)
                  (setq current-day new-current-day)
                  (insert "\n" (calendar-day-name (mod current-day 7) t t) slotline))
                (while (< current-day new-current-day)               ;; We have advanced a day
                  (cl-incf current-line)
                  (cl-incf current-day)
                  (save-excursion
                    (goto-char (point-max))
                    (insert "\n" (calendar-day-name (mod current-day 7) t t) slotline)))
                (let ((start-pos (if (< (% beg 1440) offset-to-mins) (get-start-pos (- current-line 1) (+ 1440 beg-in-day)) (get-start-pos current-line beg-in-day)))
                      (end-pos (if (and spans-multi-days spans-multi-lines)
                                   (progn
                                        ; Because of the limits of time ranges, this will execute once.
                                        ; But for future-proofing's sake :>
                                     (dotimes (i (- (/ end 1440) (/ beg 1440)))
                                       (cl-incf current-line)
                                       (cl-incf current-day)
                                       (save-excursion
                                         (goto-char (point-max))
                                         (insert "\n" (calendar-day-name (mod current-day 7) t t) slotline)))
                                     (get-end-pos current-line (- end-in-day 1440)))
                                 (get-end-pos current-line end-in-day))))
                  (if (and (not is-done) (or (get-text-property start-pos 'org-timeline-occupied)
                                             (get-text-property end-pos 'org-timeline-occupied)))
                      (put-text-property start-pos end-pos 'font-lock-face 'org-timeline-conflict)  ;; Warning face for conflicts
                    (put-text-property start-pos end-pos 'font-lock-face face))
                  (unless is-done (put-text-property start-pos end-pos 'org-timeline-occupied t))
                  (when name
                    (put-text-property start-pos end-pos 'help-echo name))))))
          (buffer-string))))))

(defun org-timeline-insert-timeline ()
  "Insert graphical timeline into agenda buffer."
  (interactive)
  (unless (buffer-narrowed-p)
    (goto-char (point-min))
    (while (and (eq (get-text-property (line-beginning-position) 'org-agenda-type) 'agenda)
                (not (eobp)))
      (forward-line))
    (forward-line)
    (let ((inhibit-read-only t)
          (tl (org-timeline--generate-timeline)))
      (goto-char (point-min)) ; insert timeline at start
      (insert tl)
      (insert (propertize (concat "\n" (make-string (/ (window-width) 2) ?─)) 'face 'org-time-grid) "\n"))
    ;; enable `font-lock-mode' in agenda view to display the "chart"
    (font-lock-mode)))

(provide 'org-timeline)
;;; org-timeline.el ends here
(add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
                                        ; To show all timed items
(setq org-timeline-default-duration 15)
#+END_SRC
*** Custom org-agenda command
#+begin_src emacs-lisp
(use-package helm-org)
(use-package org-ql
  :general
  (dcao-leader-def
   "o r" 'helm-org-ql-agenda-files))

(setq org-agenda-custom-commands
      '(("a" "dcao view"
         ((org-ql-block '(and (todo) (tags-local "focus"))
                        ((org-ql-block-header "focus")))
          (agenda)))))

(defadvice org-agenda (around split-vertically activate)
  (let ((split-width-threshold 120))  ; or whatever width makes sense for you
    ad-do-it))
#+end_src
*** texfrag
#+begin_src emacs-lisp
(use-package texfrag
  :general
  (dcao-local-leader-def
   :keymaps 'org-mode-map
   "l" 'texfrag-document)
  :config
  (texfrag-global-mode))
#+end_src
*** Second brain - org-roam
#+begin_src emacs-lisp
(use-package org-roam
  :delight
  :after org
  :hook (after-init . org-roam-mode)
  :custom
  (org-roam-directory (concat dcao/org-root "brain"))
  :general
  (dcao-leader-def
   "o b" 'org-roam
   "o i" 'org-roam-insert
   "o d" 'org-roam-find-file
   "o g" 'org-roam-show-graph)
   :config
   (setq org-roam-ref-capture-templates
    '(("r" "ref" plain (function org-roam--capture-get-point)
       ""
       :file-name "${slug}"
       :head "#+title: ${title}
,#+roam_key: ${ref}
,#+latex_header: \\usepackage{prftree}\n"
       :unnarrowed t))))

(use-package company-org-roam
  :straight (:host github :repo "org-roam/company-org-roam")
  :config
  (push 'company-org-roam company-backends))
#+end_src
** HTML
#+BEGIN_SRC emacs-lisp
(setq sgml-basic-offset 4)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook (rust-mode . lsp)
  :commands lsp
  :config
  (setq lsp-prefer-flymake nil)
  (setq lsp-rust-server 'rust-analyzer)
  (setq lsp-rust-analyzer-server-command '("rust-analyzer")))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+END_SRC
** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yaml\\'" . yaml-mode)
         ("\\.yml\\'" . yaml-mode)))
#+END_SRC
** C
#+BEGIN_SRC emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset 4)

(use-package flycheck-pkg-config
  :commands (flycheck-pkg-config))
#+END_SRC
** Zig
#+BEGIN_SRC emacs-lisp
(use-package zig-mode
  :mode (("\\.zig\\'" . zig-mode)))
#+END_SRC
* Apps
** calfw
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :commands cfw:open-org-calendar
  :general
  (dcao-leader-def
   "C" 'cfw:open-org-calendar)
  :config
  (use-package calfw-org))
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :general
  (dcao-leader-def
   "o e" 'elfeed))

  :config
  (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
  (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
  (use-package elfeed-web)
  (use-package elfeed-goodies
    :config
    (elfeed-goodies/setup))
  (use-package elfeed-org
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat dcao/org-root "elfeed.org"))))
#+END_SRC

